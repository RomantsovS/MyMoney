
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	АдресИсходнойСхемыКомпоновкиДанных = Параметры.АдресСхемыКомпоновкиДанных;
	УникальныйИдентификаторВладельца = Параметры.УникальныйИдентификатор;
	
	// Заголовок формы
	Заголовок = Параметры.Заголовок;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	// Компоновщик настроек инициализируется редактируемой схемой компоновки данных
	ИнициализироватьКомпоновщикНастроек(КомпоновщикНастроек, Параметры.АдресНастроекКомпоновкиДанных);
	
	Элементы.ГруппаОтбор.Видимость                  = Не Параметры.НеНастраиватьОтбор;
	Элементы.ГруппаПараметры.Видимость              = Не Параметры.НеНастраиватьПараметры;
	Элементы.ГруппаПорядок.Видимость                = Не Параметры.НеНастраиватьПорядок;
	Элементы.ГруппаУсловноеОформление.Видимость     = Не Параметры.НеНастраиватьУсловноеОформление;
	Элементы.ГруппаПоля.Видимость                   = Не Параметры.НеНастраиватьВыбор;
	
	ТолькоПросмотр = Параметры.ТолькоПросмотр;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), 
			НСтр("ru='При закрытии формы введенная в нее информация будет утеряна. Закрыть?'"),
			РежимДиалогаВопрос.ДаНет);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОтборКомпоновкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ПараметрыОткрытия = ПолучитьДоступныеПоляНастройкиОтбораКомпоновщика();
	
	ОП = Новый ОписаниеОповещения("ДобавитьОтборЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.Отчеты.Форма.НастройкаСКДВыборДоступныхПолей", ПараметрыОткрытия, ЭтотОбъект, , , , ОП,
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОтборЗавершение(Результат, ДопПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДобавитьОтборЗавершениеСервер(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОтборЗавершениеСервер(Поле)
	
	МассивПоиск = ДоступныеПоляОтбора.НайтиСтроки(Новый Структура("Поле", Поле));
	
	Если МассивПоиск.Количество() > 0 Тогда 
		НоваяСтрока = ОтборКомпоновки.Добавить();
		
		НоваяСтрока.ЛевоеЗначение = Поле;
		НоваяСтрока.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		
		НоваяСтрока.Использование = Истина;
		
		НоваяСтрока.Тип = МассивПоиск[0].Тип;
		НоваяСтрока.ДоступныеВидыСравнения = МассивПоиск[0].ДоступныеВидыСравнения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКомпоновкиПередНачаломИзменения(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	ТекЭлемент = Элемент.ТекущийЭлемент;
	
	Если ТекЭлемент = Элементы.ОтборКомпоновкиВидСравнения Тогда 
		ТекЭлемент.СписокВыбора.ЗагрузитьЗначения(ТекДанные.ДоступныеВидыСравнения.ВыгрузитьЗначения());
	ИначеЕсли ТекЭлемент = Элементы.ОтборКомпоновкиПравоеЗначение Тогда 		
		ТекЭлемент.ОграничениеТипа = ТекДанные.Тип;		
	ИначеЕсли ТекЭлемент = Элементы.ОтборКомпоновкиИспользование Тогда 
		ТекДанные.ПравоеЗначение = ТекДанные.Тип.ПривестиЗначение(ТекДанные.ПравоеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКомпоновкиВидСравненияПриИзменении(Элемент)
	
	ТекДанные = Элементы.ОтборКомпоновки.ТекущиеДанные;
	
	Если ТекДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Или ТекДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда 
		
		Список = Новый СписокЗначений;
		Список.Добавить(ТекДанные.ПравоеЗначение);
		
		ТекДанные.ПравоеЗначение = Список;
	Иначе
		Если ТипЗнч(ТекДанные.ПравоеЗначение) = Тип("СписокЗначений") Тогда 			
			Если ТекДанные.ПравоеЗначение.Количество() > 0 Тогда 
				ТекДанные.ПравоеЗначение = ТекДанные.ПравоеЗначение[0];
			Иначе
				ТекДанные.ПравоеЗначение = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКомпоновкиПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ОтборКомпоновки.ТекущиеДанные;
	
	Если ТекДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Или ТекДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда 
		СтандартнаяОбработка = Ложь;
		
		ТекМетаданныеСтрокой = ПолучитьИмяМетаданных(ТекДанные.Тип.Типы()[0]);
		
		ОП = Новый ОписаниеОповещения("ОтборВыборЗавершение", ЭтотОбъект, ТекДанные);
		
		ОткрытьФорму("Обработка.Отчеты.Форма.ФормаВыбора", Новый Структура("ИмяМетаданных, Список, Дерево",
		ТекМетаданныеСтрокой, ТекДанные.ПравоеЗначение.ВыгрузитьЗначения(), Истина), ЭтаФорма, , , , ОП, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяМетаданных(Тип)
	
	Возврат Метаданные.НайтиПоТипу(Тип).ПолноеИмя();
	
КонецФункции

&НаКлиенте
Процедура ОтборВыборЗавершение(Результат, ДопПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДопПараметры.ПравоеЗначение = Результат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКомпоновкиПравоеЗначениеПриИзменении(Элемент)
	
	Элементы.ОтборКомпоновки.ТекущиеДанные.Использование = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ПараметрыОткрытия = ПолучитьДоступныеПоляНастройкиСтруктураКомпоновщика();
	
	ОП = Новый ОписаниеОповещения("ДобавитьСтруктураЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.Отчеты.Форма.НастройкаСКДВыборДоступныхПолей", ПараметрыОткрытия, ЭтотОбъект, , , , ОП,
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтруктураЗавершение(Результат, ДопПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = СтруктураКомпоновки.Добавить();
	
	НоваяСтрока.Поле = Результат;
	НоваяСтрока.Использование = Истина;
	
	Элементы.СтруктураКомпоновки.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДанныхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ПараметрыОткрытия = ПолучитьДоступныеПоляПараметрыДанныхКомпоновщика();
	
	ОП = Новый ОписаниеОповещения("ДобавитьПараметрДанныхЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.Отчеты.Форма.НастройкаСКДВыборДоступныхПолей", ПараметрыОткрытия, ЭтотОбъект, , , , ОП,
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПараметрДанныхЗавершение(Результат, ДопПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДобавитьПараметрДанныхЗавершениеСервер(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПараметрДанныхЗавершениеСервер(Параметр)
	
	МассивПоиск = ДоступныеПоляПараметровДанных.НайтиСтроки(Новый Структура("Параметр", Параметр));
	
	Если МассивПоиск.Количество() > 0 Тогда 
		НоваяСтрока = ПараметрыДанныхКомпоновки.Добавить();
		
		НоваяСтрока.Параметр = Параметр;
		
		НоваяСтрока.Использование = Истина;
		
		НоваяСтрока.Тип = МассивПоиск[0].Тип;
		НоваяСтрока.ДоступныеЗначения = МассивПоиск[0].ДоступныеЗначения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДанныхПередНачаломИзменения(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	ТекЭлемент = Элемент.ТекущийЭлемент;
	
	Если ТекЭлемент = Элементы.ПараметрыДанныхЗначение Тогда 		
		ТекЭлемент.ОграничениеТипа = ТекДанные.Тип;
		
		Если ТекДанные.ДоступныеЗначения.Количество() > 0 Тогда 
			Отказ = Истина;
			
			ТекДанные.ДоступныеЗначения.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ПараметрВыборЗавершение", ЭтотОбъект, ТекДанные));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрВыборЗавершение(Результат, ДопПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДопПараметры.Значение = Результат.Значение;
	ДопПараметры.Использование = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДанныхЗначениеПриИзменении(Элемент)
	
	Элементы.ПараметрыДанныхКомпоновки.ТекущиеДанные.Использование = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловноеОформлениеКомпоновкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ПараметрыОткрытия = ПолучитьДоступныеПоляУсловноеОформлениеКомпоновщика();
	
	ОП = Новый ОписаниеОповещения("ДобавитьУсловноеОформлениеЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.Отчеты.Форма.НастройкаСКДВыборДоступныхПолей", ПараметрыОткрытия, ЭтотОбъект, , , , ОП,
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУсловноеОформлениеЗавершение(Результат, ДопПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = УсловноеОформлениеКомпоновки.Добавить();
	
	НоваяСтрока.Поле = Результат;
	НоваяСтрока.Использование = Истина;
	НоваяСтрока.Параметр = "МаксимальнаяШирина";
	НоваяСтрока.Представление = ОтчетыСКДВызовСервера.ПолучитьПредставлениеПараметраУсловногоОформления(НоваяСтрока.Параметр);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ПараметрыОткрытия = ПолучитьДоступныеПоляВыбораКомпоновщика();
	
	ОП = Новый ОписаниеОповещения("ДобавитьВыборЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.Отчеты.Форма.НастройкаСКДВыборДоступныхПолей", ПараметрыОткрытия, ЭтотОбъект, , , , ОП,
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВыборЗавершение(Результат, ДопПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = ВыборКомпоновки.Добавить();
	
	НоваяСтрока.Поле = Результат;
	НоваяСтрока.Использование = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗавершитьРедактирование(Команда)
	
	Модифицированность = Ложь;
	
	Если ЗначениеЗаполнено(УникальныйИдентификаторВладельца) Тогда
		
		Закрыть(ПолучитьНастройкиКомпоновщикаДляЗакрытия(УникальныйИдентификаторВладельца));
		
	Иначе
		
		Закрыть(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроек(КомпоновщикНастроек, АдресНастроекКомпоновкиДанных = Неопределено)
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресИсходнойСхемыКомпоновкиДанных);
	
	Если ЗначениеЗаполнено(АдресНастроекКомпоновкиДанных) Тогда
		НастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных);
	КонецЕсли;
	
	Попытка
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресИсходнойСхемыКомпоновкиДанных));
	Исключение
		Сообщить(ОписаниеОшибки());
		
		Возврат;
	КонецПопытки;
	
	Если ЗначениеЗаполнено(АдресНастроекКомпоновкиДанных) Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КонецЕсли;
	
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	//Отбор
	Для Каждого Элемент Из Настройки.ДоступныеПоляОтбора.Элементы Цикл 
		Если Элемент.Папка Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДоступныеПоляОтбора.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
	КонецЦикла;
	
	Для Каждого Элемент Из Настройки.Отбор.Элементы Цикл 		
		НоваяСтрока = ОтборКомпоновки.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
		
		МассивПоиск = ДоступныеПоляОтбора.НайтиСтроки(Новый Структура("Поле", НоваяСтрока.ЛевоеЗначение));
		
		Если МассивПоиск.Количество() > 0 Тогда 
			НоваяСтрока.ДоступныеВидыСравнения = МассивПоиск[0].ДоступныеВидыСравнения;
			НоваяСтрока.Тип = МассивПоиск[0].Тип;
		КонецЕсли;
	КонецЦикла;
	
	//Структура
	Для Каждого Элемент Из Настройки.ДоступныеПоляГруппировок.Элементы Цикл 		
		ДоступныеПоляСтруктура.Добавить(Элемент.Поле);
	КонецЦикла;
	
	Для Каждого ЭлементСтруктуры Из Настройки.Структура Цикл
		ОтчетыСКДВызовСервера.ИнициализироватьНастройкиГруппировки(ЭлементСтруктуры, СтруктураКомпоновки);
	КонецЦикла;
	
	//Параметры
	Для Каждого Элемент Из Настройки.ПараметрыДанных.ДоступныеПараметры.Элементы Цикл 
		Если Не Элемент.Видимость Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДоступныеПоляПараметровДанных.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
	КонецЦикла;
	
  	Для Каждого Элемент Из Настройки.ПараметрыДанных.Элементы Цикл 
		МассивПоиск = ДоступныеПоляПараметровДанных.НайтиСтроки(Новый Структура("Параметр", Строка(Элемент.Параметр)));
		
  		Если МассивПоиск.Количество() > 0 Тогда 
 			НоваяСтрока = ПараметрыДанныхКомпоновки.Добавить();
 			ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
			
			НоваяСтрока.ДоступныеЗначения = МассивПоиск[0].ДоступныеЗначения;
			НоваяСтрока.Тип = МассивПоиск[0].Тип;
   		КонецЕсли;
 	КонецЦикла;
	
	//Оформление
	Для Каждого Элемент Из Настройки.УсловноеОформление.ДоступныеПоляПолей.Элементы Цикл 		
		Если Элемент.Папка Тогда 
			Продолжить;
		КонецЕсли;
		
		ДоступныеПоляУсловноеОформление.Добавить(Элемент.Поле);
	КонецЦикла;
	
	МассивПараметров = ОтчетыСКДВызовСервера.СписокДоступныхПараметровУсловногоОформления();
	
	Для Каждого ЭлементУО Из Настройки.УсловноеОформление.Элементы Цикл
		ИспользуемыйЭлемент = Ложь;
		
		Для Каждого ПараметрОформления Из ЭлементУО.Оформление.Элементы Цикл
			Если ПараметрОформления.Использование И МассивПараметров.НайтиПоЗначению(Строка(ПараметрОформления.Параметр)) <> Неопределено Тогда 
				ИспользуемыйЭлемент = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ИспользуемыйЭлемент Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = УсловноеОформлениеКомпоновки.Добавить();
		
		Для Каждого ПолеУО Из ЭлементУО.Поля.Элементы Цикл 
			НоваяСтрока.Поле = ПолеУО.Поле;
			
			Для Каждого ПараметрОформления Из ЭлементУО.Оформление.Элементы Цикл 
				Если Не ПараметрОформления.Использование Тогда 
					Продолжить;
				КонецЕсли;
				
				Если МассивПараметров.НайтиПоЗначению(Строка(ПараметрОформления.Параметр)) <> Неопределено Тогда 
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрОформления, , "Использование");
					НоваяСтрока.Представление = ОтчетыСКДВызовСервера.ПолучитьПредставлениеПараметраУсловногоОформления(НоваяСтрока.Параметр);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		НоваяСтрока.Использование = ЭлементУО.Использование;
	КонецЦикла;
	
	//Выбор
	Для Каждого Элемент Из Настройки.ДоступныеПоляВыбора.Элементы Цикл 		
		Если Элемент.Папка Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДоступныеПоляВыбора.Добавить();
		НоваяСтрока.Значение = Элемент.Поле;
	КонецЦикла;
	
	Для Каждого Элемент Из Настройки.Выбор.Элементы Цикл
		НоваяСтрока = ВыборКомпоновки.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиКомпоновщикаДляЗакрытия(УникальныйИдентификатор)
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресИсходнойСхемыКомпоновкиДанных);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресИсходнойСхемыКомпоновкиДанных));
	
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	//Отбор
	Настройки.Отбор.Элементы.Очистить();
	
	Для Каждого Стр Из ОтборКомпоновки Цикл 
		НовЭлемент = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Стр.ЛевоеЗначение);
		НовЭлемент.Использование = Стр.Использование;
		НовЭлемент.ПравоеЗначение = Стр.ПравоеЗначение;
		НовЭлемент.ВидСравнения = Стр.ВидСравнения;
	КонецЦикла;
	
	//Структура
	Настройки.Структура.Очистить();
	
	ТекГруппировка = Неопределено;
	
	Для Каждого Стр Из СтруктураКомпоновки Цикл 
		//Если Не Стр.Использование Тогда 
		//	Продолжить;
		//КонецЕсли;
		
		Если Не Стр.Использование И ТекГруппировка = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ТекГруппировка = Неопределено Тогда 
			ТекГруппировка = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		Иначе
			ТекГруппировка = ТекГруппировка.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		КонецЕсли;
		
		ТекГруппировка.Использование = Стр.Использование;
		
		НовВыбор = ТекГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		НовВыбор.Использование = Истина;
		
		НовПолеГруппировки = ТекГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		НовПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(Стр.Поле);
		НовПолеГруппировки.Использование = Истина;
		
		НовПолеПорядок = ТекГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		НовПолеПорядок.Использование = Истина;		
		
		ТекГруппировка.Имя = Стр.Имя;
	КонецЦикла;
	
	//Параметры
	Для Каждого ЭлементПараметра Из Настройки.ПараметрыДанных.Элементы Цикл 
		ЭлементПараметра.Использование = Ложь;
	КонецЦикла;
	
	Для Каждого Стр Из ПараметрыДанныхКомпоновки Цикл 		
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки.ПараметрыДанных.Элементы, Стр.Параметр, Стр.Значение, Стр.Использование);
	КонецЦикла;
	
	//Оформление
	МассивУдалить = Новый Массив;
	СписокПараметровУО = ОтчетыСКДВызовСервера.СписокДоступныхПараметровУсловногоОформления();
	
	Для Каждого СтрЭлем Из Настройки.УсловноеОформление.Элементы Цикл 
		Для Каждого СтрОформление Из СтрЭлем.Оформление.Элементы Цикл 
			Для Каждого СтрПараметрУО Из СписокПараметровУО Цикл 
				Если СтрОформление.Параметр = Новый ПараметрКомпоновкиДанных(СтрПараметрУО.Значение) И СтрОформление.Использование = Истина Тогда 
					МассивУдалить.Добавить(СтрЭлем);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого СтрокаМассива Из МассивУдалить Цикл 
		Настройки.УсловноеОформление.Элементы.Удалить(СтрокаМассива);
	КонецЦикла;
	
	Для Каждого Стр Из УсловноеОформлениеКомпоновки Цикл 
		//Если Не Стр.Использование Тогда 
		//	Продолжить;
		//КонецЕсли;
		
		ЭлементУО = Настройки.УсловноеОформление.Элементы.Добавить();
		ЭлементУО.Использование = Стр.Использование;
		
		ПолеУО = ЭлементУО.Поля.Элементы.Добавить();
		ПолеУО.Поле = Новый ПолеКомпоновкиДанных(Стр.Поле);
		ПолеУО.Использование = Стр.Использование;
				
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(ЭлементУО.Оформление, Стр.Параметр, Стр.Значение);
	КонецЦикла;
	
	//Выбор
	Настройки.Выбор.Элементы.Очистить();
	
	Для Каждого Стр Из ВыборКомпоновки Цикл 
		НовВыбор = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		НовВыбор.Использование = Стр.Использование;
		НовВыбор.Поле = Новый ПолеКомпоновкиДанных(Стр.Поле);
	КонецЦикла;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	Возврат ПоместитьВоВременноеХранилище(КомпоновщикНастроек.ПолучитьНастройки(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПолучитьДоступныеПоляНастройкиОтбораКомпоновщика()
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("АдресДоступныхПолей", ПоместитьВоВременноеХранилище(ДоступныеПоляОтбора.Выгрузить(,
	"Поле").ВыгрузитьКолонку("Поле"), УникальныйИдентификатор));
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция ПолучитьДоступныеПоляНастройкиСтруктураКомпоновщика()
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("АдресДоступныхПолей", ПоместитьВоВременноеХранилище(ДоступныеПоляСтруктура.ВыгрузитьЗначения(),
	УникальныйИдентификатор));
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция ПолучитьДоступныеПоляПараметрыДанныхКомпоновщика()
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("АдресДоступныхПолей", ПоместитьВоВременноеХранилище(ДоступныеПоляПараметровДанных.Выгрузить(,
	"Параметр").ВыгрузитьКолонку("Параметр"), УникальныйИдентификатор));
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция ПолучитьДоступныеПоляУсловноеОформлениеКомпоновщика()
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("АдресДоступныхПолей", ПоместитьВоВременноеХранилище(ДоступныеПоляУсловноеОформление.ВыгрузитьЗначения(),
	УникальныйИдентификатор));
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция ПолучитьДоступныеПоляВыбораКомпоновщика()
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("АдресДоступныхПолей", ПоместитьВоВременноеХранилище(ДоступныеПоляВыбора.ВыгрузитьЗначения(),
	УникальныйИдентификатор));
	
	Возврат СтруктураПараметров;
	
КонецФункции

#КонецОбласти