&НаСервере
Процедура НастроитьОформлениеДиаграммы()
	ШрифтПодписей = Новый Шрифт(ШрифтыСтиля.МелкийШрифтТекста);
	
	ДиаграммаОстатки.ШрифтПодписей = ШрифтПодписей;
	
	ДиаграммаОстатки.ОбластьПостроения.Шрифт = ШрифтПодписей;
	ДиаграммаОстатки.ОбластьПостроения.Верх = 0;
	ДиаграммаОстатки.ОбластьПостроения.Лево = 0;
	ДиаграммаОстатки.ОбластьПостроения.Низ = 1;
	ДиаграммаОстатки.ОбластьПостроения.Право = 1;
	
	ДиаграммаОстатки.ОбластьПостроения.ЦветШкалы = WebЦвета.Черный;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	ПодготовитьФормуНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	Периодичность = Перечисления.Периодичность.Неделя;
	
	период.ДатаНачала = НачалоДня(ТекущаяДата()) - 3600 * 24 * 365;
	Период.ДатаОкончания = КонецДня(ТекущаяДата());
	
	НастроитьОформлениеДиаграммы();
	ОбновитьТекущуюСтраницу();
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	
	структ = новый Структура;
	структ.Вставить("ОтборКошелек", ОтборКошелек);
	
	ОП = новый ОписаниеОповещения("НастройкаОтбораПослеИзменения", ЭтаФорма);
	
	ОткрытьФорму("Обработка.Отчеты.Форма.НастройкиОтбора", структ, , , , , ОП);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОтбораПослеИзменения(Результат, допПараметры) Экспорт 
	Если Результат <> Неопределено Тогда 
		ОтборКошелек = Результат.ОтборКошелек;
		
		НастройкаОтбораПослеИзмененияСерв();
		
		Если Элементы.Группа2.ТекущаяСтраница = Элементы.ГруппаДиаграммы Тогда
			ДиаграммаСформирована = Истина;			
			ОтчетСформирован = ложь;
		Иначе
			ДиаграммаСформирована = ложь;
			ОтчетСформирован = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НастройкаОтбораПослеИзмененияСерв()
	ДиаграммаСформирована = ложь;			
	ОтчетСформирован = ложь;
	
	ОбновитьТекущуюСтраницу();
КонецПроцедуры

&НаКлиенте
Процедура КошелекПриИзменении(Элемент)	
	КошелекПриИзмененииСерв();
КонецПроцедуры

&НаСервере
Процедура КошелекПриИзмененииСерв()
	ДиаграммаСформирована = ложь;			
	ОтчетСформирован = ложь;
	
	ОбновитьТекущуюСтраницу();
КонецПроцедуры

&НаКлиенте
Процедура Группа2ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Группа2ПриСменеСтраницыСерв();	
КонецПроцедуры

&НаСервере
Процедура Группа2ПриСменеСтраницыСерв()
	ОбновитьТекущуюСтраницу();	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекущуюСтраницу()
	Если Элементы.Группа2.ТекущаяСтраница = Элементы.ГруппаДиаграммы Тогда
		Если Не ДиаграммаСформирована Тогда 
			РеквизитФормыВЗначение("Объект").ОбновитьДиаграммуСервер();
		КонецЕсли;
	Иначе
		Если Не ОтчетСформирован Тогда 
			ОбновитьОстаткиСервер();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьОстаткиСервер() Экспорт 
	Запрос = Новый Запрос;
	МВТ = новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МВТ; 
	Запрос.УстановитьПараметр("Дата1", Период.ДатаНачала);
	Запрос.УстановитьПараметр("Дата2", Период.ДатаОкончания);
	Запрос.УстановитьПараметр("ВалютаУчета", ЗначениеНастроекВызовСервераПовтИсп.ПолучитьЗначениеКонстанты("ВалютаУчета"));
	Запрос.УстановитьПараметр("ОтборКошелек", ?(ОтборКошелек.Количество() = 0, Неопределено, ОтборКошелек));
	Запрос.УстановитьПараметр("НеИспользоватьОтборКошелек", ОтборКошелек.Количество() = 0);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПродажиВалютыОбороты.Валюта,
	|	ПродажиВалютыОбороты.Кошелек,
	|	ПродажиВалютыОбороты.Партия,
	|	ПродажиВалютыОбороты.Курс КАК Курс,
	|	ПродажиВалютыОбороты.Сумма,
	|	ПродажиВалютыОбороты.СуммаРуб,
	|	ПродажиВалютыОбороты.Регистратор КАК Регистратор,
	|	ПродажиВалютыОбороты.Период
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	РегистрНакопления.ПродажиВалюты КАК ПродажиВалютыОбороты
	|ГДЕ
	|	(ПродажиВалютыОбороты.Кошелек В (&ОтборКошелек)
	|			ИЛИ &НеИспользоватьОтборКошелек)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПокупкиВалютыОбороты.Валюта,
	|	ПокупкиВалютыОбороты.Кошелек,
	|	ПокупкиВалютыОбороты.Партия,
	|	ПокупкиВалютыОбороты.Партия.Курс КАК КурсПокупки,
	|	ПокупкиВалютыОбороты.СуммаОборот КАК СуммаПокупки,
	|	ПокупкиВалютыОбороты.СуммаРубОборот КАК СуммаПокупкиРуб
	|ПОМЕСТИТЬ втПокупка
	|ИЗ
	|	РегистрНакопления.ПокупкиВалюты.Обороты(
	|			,
	|			,
	|			,
	|			(Валюта, партия) В
	|				(ВЫБРАТЬ
	|					вт.Валюта,
	|					вт.Партия
	|				ИЗ
	|					вт)) КАК ПокупкиВалютыОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт.Валюта КАК Валюта,
	|	вт.Кошелек КАК Кошелек,
	|	вт.Партия КАК Партия,
	|	втПокупка.КурсПокупки,
	|	ПРЕДСТАВЛЕНИЕ(вт.Валюта) КАК ВалютаПредставление,
	|	вт.Курс КАК Курс,
	|	вт.Сумма КАК СуммаПродажи,
	|	вт.Сумма * (вт.Курс - втПокупка.КурсПокупки) КАК ПрибыльУбыток,
	|	вт.СуммаРуб КАК СуммаПродажиРуб,
	|	втПокупка.СуммаПокупки КАК СуммаПокупкиВал,
	|	втПокупка.СуммаПокупкиРуб КАК СуммаПокупкиРуб,
	|	вт.Регистратор КАК Регистратор,
	|	вт.Период КАК Период
	|ИЗ
	|	вт КАК вт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПокупка КАК втПокупка
	|		ПО вт.Валюта = втПокупка.Валюта
	|			И вт.Партия = втПокупка.Партия
	|
	|УПОРЯДОЧИТЬ ПО
	|	вт.Партия.Дата
	|ИТОГИ
	|	СУММА(СуммаПродажи),
	|	СУММА(ПрибыльУбыток),
	|	СУММА(СуммаПродажиРуб),
	|	СУММА(СуммаПокупкиВал),
	|	СУММА(СуммаПокупкиРуб),
	|	МАКСИМУМ(Период)
	|ПО
	|	ОБЩИЕ,
	|	Валюта,
	|	Кошелек,
	|	Партия";
	
	РезультатЗапроса = запрос.Выполнить();
	ВыборкаОбщийИтог = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТабДок = новый ТабличныйДокумент;
	
	макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("МакетПродажиПартииВалют");
	
	Если ВыборкаОбщийИтог.Следующий() Тогда 		
		облШапка = макет.получитьОбласть("Шапка");
		облШапка.параметры.ПрибыльУбыток = ВыборкаОбщийИтог.ПрибыльУбыток;
		
		Если ВыборкаОбщийИтог.ПрибыльУбыток < 0 Тогда 
			облШапка.области.областьПрибыльУбытокШапка.цветФона = WebЦвета.Красный;
		Иначе
			облШапка.области.областьПрибыльУбытокШапка.цветФона = WebЦвета.ЗеленаяЛужайка					
		КонецЕсли;
		
		ТабДок.Вывести(облШапка);
		
		облСтрока = макет.получитьОбласть("СтрокаГруппировка");
		облСтрокаПартия = макет.получитьОбласть("СтрокаГруппировкаПартия");
		
		ТабДок.НачатьАвтогруппировкуСтрок();
		
		ВыборкаВалюта = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаВалюта.Следующий() Цикл		
			облСтрока.параметры.измерение = ВыборкаВалюта.Валюта.краткоеНаименование;
			облСтрока.параметры.измерениеРасшифровка = Неопределено;
			облСтрока.параметры.СуммаПродажи = ВыборкаВалюта.СуммаПродажи;
			облСтрока.параметры.СуммаПродажиРуб =  ВыборкаВалюта.СуммаПродажиРуб;
			облСтрока.параметры.ПрибыльУбыток =  ВыборкаВалюта.ПрибыльУбыток;
			облСтрока.параметры.СуммаПокупкиВал =  ВыборкаВалюта.СуммаПокупкиВал;
			облСтрока.параметры.СуммаПокупкиРуб =  ВыборкаВалюта.СуммаПокупкиРуб;
			
			Если ВыборкаВалюта.ПрибыльУбыток < 0 Тогда 
				облСтрока.области.областьПрибыльУбытокГруппировка.цветФона = WebЦвета.Красный;
			Иначе
				облСтрока.области.областьПрибыльУбытокГруппировка.цветФона = WebЦвета.ЗеленаяЛужайка					
			КонецЕсли;
			
			ТабДок.Вывести(облСтрока, 1);
			
			выборкаКошелек = ВыборкаВалюта.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока выборкаКошелек.Следующий() Цикл			
				облСтрока.параметры.измерение = выборкаКошелек.кошелек;
				облСтрока.параметры.измерениеРасшифровка = Неопределено;
				облСтрока.параметры.СуммаПродажи = выборкаКошелек.СуммаПродажи;
				облСтрока.параметры.СуммаПродажиРуб =  выборкаКошелек.СуммаПродажиРуб;
				облСтрока.параметры.ПрибыльУбыток =  выборкаКошелек.ПрибыльУбыток;
				облСтрока.параметры.СуммаПокупкиВал =  выборкаКошелек.СуммаПокупкиВал;
				облСтрока.параметры.СуммаПокупкиРуб =  выборкаКошелек.СуммаПокупкиРуб;
				
				Если выборкаКошелек.ПрибыльУбыток < 0 Тогда 
					облСтрока.области.областьПрибыльУбытокГруппировка.цветФона = WebЦвета.Красный;
				Иначе
					облСтрока.области.областьПрибыльУбытокГруппировка.цветФона = WebЦвета.ЗеленаяЛужайка					
				КонецЕсли;
				
				ТабДок.Вывести(облСтрока, 2);
				
				выборкаРегистратор = выборкаКошелек.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока выборкаРегистратор.Следующий() Цикл			
					облСтрока.параметры.измерение = формат(выборкаРегистратор.период, "ДФ=гггг.МММдд");
					облСтрока.параметры.измерениеРасшифровка = выборкаРегистратор.Партия;
					облСтрока.параметры.СуммаПродажи = выборкаРегистратор.СуммаПродажи;
					облСтрока.параметры.СуммаПродажиРуб =  выборкаРегистратор.СуммаПродажиРуб;
					облСтрока.параметры.ПрибыльУбыток =  выборкаРегистратор.ПрибыльУбыток;
					облСтрока.параметры.СуммаПокупкиВал =  выборкаРегистратор.СуммаПокупкиВал;
					облСтрока.параметры.СуммаПокупкиРуб =  выборкаРегистратор.СуммаПокупкиРуб;
					
					Если выборкаРегистратор.ПрибыльУбыток < 0 Тогда 
						облСтрока.области.областьПрибыльУбытокГруппировка.цветФона = WebЦвета.Красный;
					Иначе
						облСтрока.области.областьПрибыльУбытокГруппировка.цветФона = WebЦвета.ЗеленаяЛужайка					
					КонецЕсли;
					
					ТабДок.Вывести(облСтрока, 3);
					
					выборка = выборкаРегистратор.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока выборка.Следующий() Цикл				
						облСтрокаПартия.параметры.измерение = выборка.ВалютаПредставление + " " + выборка.курсПокупки + " > " + Окр(выборка.курс, 2);
						облСтрокаПартия.параметры.измерениеРасшифровка = выборка.регистратор;
						облСтрокаПартия.параметры.СуммаПродажи = выборка.СуммаПродажи;
						облСтрокаПартия.параметры.СуммаПродажиРуб =  выборка.СуммаПродажиРуб;
						облСтрокаПартия.параметры.ПрибыльУбыток =  выборка.ПрибыльУбыток;
						облСтрокаПартия.параметры.СуммаПокупкиВал =  выборка.СуммаПокупкиВал;
						облСтрокаПартия.параметры.СуммаПокупкиРуб =  выборка.СуммаПокупкиРуб;
						
						Если выборка.ПрибыльУбыток < 0 Тогда 
							облСтрокаПартия.области.ОбластьПрибыльУбытокПартия.цветФона = WebЦвета.Красный;
						Иначе
							облСтрокаПартия.области.ОбластьПрибыльУбытокПартия.цветФона = WebЦвета.ЗеленаяЛужайка					
						КонецЕсли;
						
						ТабДок.Вывести(облСтрокаПартия, 4);
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		ТабДок.ЗакончитьАвтогруппировкуСтрок();
		
		мас = новый Массив;
		#Если МобильноеПриложениеСервер Тогда
			мас.Добавить(100);
			мас.Добавить(70);
			мас.Добавить(75);
			мас.Добавить(100);
		#Иначе
			мас.Добавить(100);
			мас.Добавить(90);
			мас.Добавить(100);
			мас.Добавить(100);
			
			элементы.ТабДок.ОтображатьГруппировки = Истина;
		#КонецЕсли
		
		ОбщегоНазначения.РасчетШириныКолонок(ТабДок, мас);
	КонецЕсли;
	
	отчетСформирован = Истина;
КонецПроцедуры
