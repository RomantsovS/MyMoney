
#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем ОбновитьИнтерфейс;

&НаКлиенте
Перем ОбновитьИнтерфейсЗакрытьФорму;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	
	// Обновление состояния элементов.
	ПрочитатьУстановитьДоступность();
	
	ВалютаУчетаДоИзменения = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ВалютаУчета");
	
	УстановитьПараметрыФормыПароль();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_НаборКонстант" Тогда
		Если Источник = "ВалютаУчета" Тогда 
			Если ЗначениеЗаполнено(Константа_ВалютаУчета) И ВалютаУчетаДоИзменения <> Константа_ВалютаУчета Тогда 
				ПоказатьПредупреждение(Новый ОписаниеОповещения("ТребуетсяПерепроведениеВсехДокументовПослеПредупреждения", ЭтотОбъект), 
				НСтр("ru = 'После изменения валюты учета будут перепроведены все документы'"));				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбновитьИнтерфейс = Истина Тогда 
		ОбновитьИнтерфейсЗакрытьФорму = Истина;
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВалютаУчетаПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойКошелекПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерВерсииКонфигурацииПриИзменении(Элемент)
	
	Если НомерВерсииКонфигурацииПриИзмененииСервер() Тогда 
		Подключаемый_ПриИзмененииРеквизита(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НомерВерсииКонфигурацииПриИзмененииСервер()
	
	Попытка
		ОбщегоНазначения.СравнитьВерсии(Константа_ТекущаяВерсияПриложения, "0.0.0")
	Исключение
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
		Константа_ТекущаяВерсияПриложения = ЗначениеНастроекВызовСервераПовтИсп.ТекущаяВерсияПриложения();
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура КаталогХраненияФайловПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогХраненияФайловНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//#Если Не МобильноеПриложениеКлиент Тогда
	//	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	//	Диалог.Заголовок = НСтр("ru = 'Укажите каталог информационной базы:'");
	//	
	//	Если Диалог.Выбрать() Тогда 
	//		ТекКаталог = Диалог.Каталог;
	//	Иначе
	//		Возврат;
	//	КонецЕсли;
	//#Иначе
	//	ТекКаталог = "/storage/sdcard0/MyMoney/";
	//	
	//	Если Не ВвестиСтроку(ТекКаталог) Тогда 
	//		Возврат;
	//	КонецЕсли;
	//#КонецЕсли
	//
	//НаборКонстант.КаталогХраненияФайлов = ТекКаталог;
	//
	//Подключаемый_ПриИзмененииРеквизита(Элемент);
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Заголовок = НСтр("ru = 'Укажите каталог информационной базы:'");
	
	Диалог.Показать(Новый ОписаниеОповещения("КаталогСохраненияФайлаВыборЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЧтениеСМСДляСозданияОперацийПриИзменении(Элемент)
	
	Если Не СМССообщенияКлиент.ПоддерживаетсяЖурналСМС() Тогда 		
		ПоказатьПредупреждение(, НСтр("ru = 'Журнал СМС не поддерживается в используемой операционной системе'"));
		
		Константа_ИспользоватьЧтениеСМСДляСозданияОпераций = Ложь;
	Иначе
		Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Константа_ЧасовойПоясUTCПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьПароль(Команда)
	ОткрытьФормуИзмененияПароля(новый Структура("ПоказатьПароль", Истина));
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПароль(Команда)
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуПроверкиПароляЗавершение", ЭтотОбъект, Новый Структура("удалениеПароля", Истина)); 
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПравильныйПароль", НаборКонстант.ПарольДляВхода);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru='Введите текущий пароль'"));
	ПараметрыФормы.Вставить("ЗаголовокКнопкиОК", НСтр("ru='Удалить'"));
	ОткрытьФорму("ОбщаяФорма.ФормаПроверкиПароля", ПараметрыФормы, , , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПароль(Команда)
	ОткрытьФормуИзмененияПароля(Новый Структура("ИзменитьПароль", Истина));
КонецПроцедуры

&НаКлиенте
Процедура EmailBackUp(Команда)
	ОткрытьФорму("Обработка.Настройки.Форма.ФормаEmailBackup");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЧтоНового(Команда)
	ОткрытьФорму("ОбщаяФорма.ЧтоНового", , ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПрочитатьУстановитьДоступность()
	
	Константа_ВалютаУчета = Константы["ВалютаУчета"].Получить();
	Константа_ИспользоватьЧтениеСМСДляСозданияОпераций = Константы["ИспользоватьЧтениеСМСДляСозданияОпераций"].Получить();
	Константа_КаталогХраненияФайлов = Константы["КаталогХраненияФайлов"].Получить();
	Константа_ОсновнойКошелек = Константы["ОсновнойКошелек"].Получить();
	Константа_ЧасовойПоясUTC = Константы["ЧасовойПоясUTC"].Получить();
	Константа_ТекущаяВерсияПриложения = Константы["ТекущаяВерсияПриложения"].Получить();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыФормыПароль()
	Если не ЗначениеЗаполнено(Константы.ПарольДляВхода.Получить()) Тогда 
		Элементы.ИзменитьПароль.Заголовок = "Установить пароль";
		Элементы.УдалитьПароль.Видимость = Ложь;
		Элементы.ПоказатьПароль.Видимость = Ложь;
	Иначе
		Элементы.ИзменитьПароль.Заголовок = "Изменить пароль";
		Элементы.УдалитьПароль.Видимость = Истина;
		Элементы.ПоказатьПароль.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуИзмененияПароля(ДопПараметры)
	Если ЗначениеЗаполнено(НаборКонстант.ПарольДляВхода) Тогда		
		Оповещение = Новый ОписаниеОповещения("ОткрытьФормуПроверкиПароляЗавершение", ЭтотОбъект, ДопПараметры); 
		ПараметрыФормы = Новый Структура;
		
		Если ДопПараметры.свойство("правильныйПароль") Тогда 
			ПараметрыФормы.Вставить("ПравильныйПароль", ДопПараметры.правильныйПароль);
		Иначе
			ПараметрыФормы.Вставить("ПравильныйПароль", НаборКонстант.ПарольДляВхода);
		КонецЕсли;
		
		ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru='Старый пароль'"));
		ПараметрыФормы.Вставить("ЗаголовокКнопкиОК", НСтр("ru='Продолжить'"));
		ОткрытьФорму("ОбщаяФорма.ФормаПроверкиПароля", ПараметрыФормы, , , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
	Иначе		
		ОткрытьФормуПроверкиПароляЗавершение(Истина, Новый Структура());		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПроверкиПароляЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = Истина Тогда
		Если ДополнительныеПараметры.свойство("удалениеПароля") Тогда 
			УдалитьПарольДляВходаНаСервере();
			
			Прочитать();
			
			УстановитьПараметрыФормыПароль();
		ИначеЕсли ДополнительныеПараметры.свойство("ПоказатьПароль") Тогда 
			ПоказатьПредупреждение(, " " + НаборКонстант.ПарольДляВхода, 5);
		Иначе
			Оповещение = Новый ОписаниеОповещения("ОткрытьФормуИзмененияПароляЗавершение", ЭтотОбъект); 
			
			ОткрытьФорму("Обработка.Настройки.Форма.ФормаИзмененияПароля", , ЭтаФорма, , , , Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;                                                                             
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьПарольДляВходаНаСервере()	
	Константы.ПарольДляВхода.Установить("");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуИзмененияПароляЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Прочитать();
		УстановитьПараметрыФормыПароль();
	КонецЕсли;                                                                             
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			
			Если ДлительныеОперацииВызовСервера.ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				
				Если ПараметрыОбработчикаОжидания.Свойство("ОписаниеЗавершения") Тогда 
					ВыполнитьОбработкуОповещения(ПараметрыОбработчикаОжидания.ОписаниеЗавершения);
				КонецЕсли;
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПровестиВсеДокументыНаСервере()
	
	ПараметрыЗадания = Новый Структура();
	
	Попытка
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор, "ОбщегоНазначения.ПровестиВсеДокументы",
		ПараметрыЗадания, НСтр("ru = 'Проведение всех документов'"));		
	Исключение
		Сообщить(ОписаниеОшибки());
		ВызватьИсключение;
	КонецПопытки;
	
	АдресХранилища = Результат.АдресХранилища;
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ТребуетсяПерепроведениеВсехДокументовПослеПредупреждения(допПараметры) Экспорт 
	
	ОписаниеЗавершения = Новый ОписаниеОповещения("ПослеПроведенияВсехДокументов", ЭтотОбъект);
	
	Результат = ПровестиВсеДокументыНаСервере();
	
	Если Результат.ЗаданиеВыполнено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеЗавершения);
		
		Возврат;
	КонецЕсли;
	
	// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	
	ПараметрыОбработчикаОжидания.ОписаниеЗавершения = ОписаниеЗавершения;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроведенияВсехДокументов(Результат, ДопПараметры) Экспорт 	
	
	#Если МобильноеПриложениеКлиент  Тогда 
		
		СредстваМультимедиа.ВоспроизвестиЗвуковоеОповещение(ЗвуковоеОповещение.ПоУмолчанию, Истина);
		
	#КонецЕсли
	
	ПоказатьПредупреждение(, НСтр("ru = 'Выполнено успешно'"));	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Ложь)
	
	КонстантаИмя = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Если ОбновлятьИнтерфейс Тогда
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 0.1, Истина);
	КонецЕсли;
	
	Если КонстантаИмя <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, КонстантаИмя);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	КонстантаИмя = СохранитьЗначениеРеквизита(РеквизитПутьКДанным,  Новый Структура);
	
	//УстановитьДоступность(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат "";
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	ИначеЕсли НРег(Лев(РеквизитПутьКДанным, 10)) = НРег("Константа_") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 11);
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = Константы[КонстантаИмя].Получить();
		
		Если КонстантаЗначение <> ЭтотОбъект[РеквизитПутьКДанным] Тогда
			КонстантаМенеджер.Установить(ЭтотОбъект[РеквизитПутьКДанным]);
		КонецЕсли;
		
		//Если ОбщегоНазначенияУТПовтИсп.ЕстьПодчиненныеКонстанты(КонстантаИмя, КонстантаЗначение) Тогда
		//	Прочитать();
		//КонецЕсли;
		
	КонецЕсли;
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаКлиенте
Процедура КаталогСохраненияФайлаВыборЗавершение(Результат, ДопПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Константа_КаталогХраненияФайлов = Результат[0];
	
	Подключаемый_ПриИзмененииРеквизита(Элементы.КаталогХраненияФайлов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы() Экспорт 
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
		
		Если ОбновитьИнтерфейсЗакрытьФорму = Истина Тогда 
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти