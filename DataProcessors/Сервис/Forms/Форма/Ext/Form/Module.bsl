&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиВсеДокументы(Команда)
	
	ОП = Новый ОписаниеОповещения("ПровестиВсеДокументыВопросЗавершение", ЭтаФорма);
	ПоказатьВопрос(ОП, НСтр("ru = 'Проведение всех документов может занять продолжительное время. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьСтатьи(Команда)	
	ПоказатьПредупреждение(новый ОписаниеОповещения("ПредупреждениеВводСтатьиНачЗавершение", ЭтотОбъект),
	НСтр("ru = 'Укажите статью, которую необходимо заменить'"));
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсеПратииВалют(Команда)
	УдалитьВсеПратииВалютНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			
			Если ДлительныеОперацииВызовСервера.ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				
				Если ПараметрыОбработчикаОжидания.Свойство("ОписаниеЗавершения") Тогда 
					ВыполнитьОбработкуОповещения(ПараметрыОбработчикаОжидания.ОписаниеЗавершения);
				КонецЕсли;
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПровестиВсеДокументыНаСервере()
	
	ПараметрыЗадания = Новый Структура();
	
	Попытка
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор, "ОбщегоНазначения.ПровестиВсеДокументы",
		ПараметрыЗадания, НСтр("ru = 'Проведение всех документов'"));		
	Исключение
		Сообщить(ОписаниеОшибки());
		ВызватьИсключение;
	КонецПопытки;
	
	АдресХранилища = Результат.АдресХранилища;
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПровестиВсеДокументыВопросЗавершение(Результат, ДопПараметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Нет Тогда 
		Возврат;
	КонецЕсли;
	
	ОписаниеЗавершения = Новый ОписаниеОповещения("ПослеПроведенияВсехДокументов", ЭтотОбъект);
	
	Результат = ПровестиВсеДокументыНаСервере();
	
	Если Результат.ЗаданиеВыполнено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеЗавершения);
		
		Возврат;
	КонецЕсли;
	
	// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	
	ПараметрыОбработчикаОжидания.ОписаниеЗавершения = ОписаниеЗавершения;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания, Истина, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроведенияВсехДокументов(Результат, ДопПараметры) Экспорт 	
	
	#Если МобильноеПриложениеКлиент  Тогда 
		
		СредстваМультимедиа.ВоспроизвестиЗвуковоеОповещение(ЗвуковоеОповещение.ПоУмолчанию, Истина);
		
	#КонецЕсли
	
	ПоказатьПредупреждение(, НСтр("ru = 'Выполнено успешно'"));	
	Оповестить("ОбновитьОстатки");
	
КонецПроцедуры

&НаСервере
Процедура ЗаменитьСтатьиНаСервере(статьяНач, статьяКон, ОтборКошелек, кол)
	запрос = новый запрос("ВЫБРАТЬ
	|	Операция.Ссылка
	|ИЗ
	|	Документ.Операция КАК Операция
	|ГДЕ
	|	Операция.Статья = &Статья
	|	И Операция.Кошелек = &Кошелек");
	запрос.УстановитьПараметр("Статья", статьяНач);
	запрос.УстановитьПараметр("Кошелек", ОтборКошелек);
	
	рез = запрос.Выполнить().Выбрать();
	
	Пока рез.Следующий() Цикл
		о = рез.ссылка.получитьОбъект();
		о.Статья = статьяКон;
		о.записать(РежимЗаписиДокумента.Проведение);
		
		кол = кол + 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПредупреждениеВводСтатьиНачЗавершение(ДопПараметры) Экспорт 	
	ПоказатьВводЗначения(новый ОписаниеОповещения("ВводСтатьиНачЗавершение", ЭтотОбъект), Неопределено,
	НСтр("ru = 'Укажите статью, которую необходимо установить'"), тип("СправочникСсылка.Статьи"));
КонецПроцедуры

&НаКлиенте
Процедура ВводСтатьиНачЗавершение(Результат, ДопПараметры) Экспорт 
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПоказатьПредупреждение(новый ОписаниеОповещения("ПредупреждениеВводСтатьиКонЗавершение", ЭтотОбъект, новый Структура("СтатьяНач", Результат)),
	НСтр("ru = 'Укажите статью, которую необходимо установить'"));
КонецПроцедуры

&НаКлиенте
Процедура ПредупреждениеВводСтатьиКонЗавершение(ДопПараметры) Экспорт 	
	ПоказатьВводЗначения(новый ОписаниеОповещения("ВводСтатьиКонЗавершение", ЭтотОбъект, ДопПараметры), Неопределено,
	НСтр("ru = 'Укажите статью, которую необходимо установить'"), тип("СправочникСсылка.Статьи"));
КонецПроцедуры

&НаКлиенте
Процедура ВводСтатьиКонЗавершение(Результат, ДопПараметры) Экспорт 
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДопПараметры.вставить("СтатьяКон", Результат);
	
	ПоказатьПредупреждение(новый ОписаниеОповещения("ПредупреждениеВводКошелькаЗавершение", ЭтотОбъект, ДопПараметры),
	НСтр("ru = 'Укажите кошелек, с отбором по которому необходимо заменить статьи'"));
КонецПроцедуры

&НаКлиенте
Процедура ПредупреждениеВводКошелькаЗавершение(ДопПараметры) Экспорт 	
	ПоказатьВводЗначения(новый ОписаниеОповещения("ВводКошелькаЗавершение", ЭтотОбъект, ДопПараметры), Неопределено,
	НСтр("ru = 'Укажите кошелек, с отбором по которому необходимо заменить статьи'"), тип("СправочникСсылка.Кошельки"));
КонецПроцедуры

&НаКлиенте
Процедура ВводКошелькаЗавершение(Результат, ДопПараметры) Экспорт 
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	кол = 0;
	
	ЗаменитьСтатьиНаСервере(ДопПараметры.статьяНач, ДопПараметры.статьяКон, Результат, кол);
	
	Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Статьи заменены в %1 операциях'"), кол));
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьВсеПратииВалютНаСервере()
	запрос = новый запрос("ВЫБРАТЬ
	|	КошелькиПартии.Регистратор
	|ИЗ
	|	РегистрНакопления.КошелькиПартии КАК КошелькиПартии");
	рез = запрос.Выполнить().Выбрать();
	
	Пока рез.Следующий() Цикл
		наборЗ = РегистрыНакопления.КошелькиПартии.СоздатьНаборЗаписей();
		наборЗ.отбор.регистратор.установить(рез.регистратор);
		наборЗ.прочитать();
		наборЗ.Очистить();
		наборЗ.Записать();
	КонецЦикла;
	
	запрос = новый запрос("ВЫБРАТЬ
	|	ПродажиВалюты.Регистратор
	|ИЗ
	|	РегистрНакопления.ПродажиВалюты КАК ПродажиВалюты");
	рез = запрос.Выполнить().Выбрать();
	
	Пока рез.Следующий() Цикл
		наборЗ = РегистрыНакопления.ПродажиВалюты.СоздатьНаборЗаписей();
		наборЗ.отбор.регистратор.установить(рез.регистратор);
		наборЗ.прочитать();
		наборЗ.Очистить();
		наборЗ.Записать();
	КонецЦикла;
	
	запрос = новый запрос("ВЫБРАТЬ
	|	ПокупкиВалюты.Регистратор
	|ИЗ
	|	РегистрНакопления.ПокупкиВалюты КАК ПокупкиВалюты");
	рез = запрос.Выполнить().Выбрать();
	
	Пока рез.Следующий() Цикл
		наборЗ = РегистрыНакопления.ПокупкиВалюты.СоздатьНаборЗаписей();
		наборЗ.отбор.регистратор.установить(рез.регистратор);
		наборЗ.прочитать();
		наборЗ.Очистить();
		наборЗ.Записать();
	КонецЦикла;
КонецПроцедуры

#КонецОбласти