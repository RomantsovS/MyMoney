&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	#Если МобильноеПриложениеСервер Тогда
		Разделитель = "/";
	#Иначе
		Разделитель = "\";
		
		Элементы.Группа1.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	#КонецЕсли
	
	запрос = новый запрос("ВЫБРАТЬ
	|	Мобильные.Ссылка
	|ИЗ
	|	ПланОбмена.Мобильные КАК Мобильные
	|ГДЕ
	|	Мобильные.Ссылка <> &Ссылка");
	запрос.УстановитьПараметр("ссылка", ПланыОбмена.Мобильные.ЭтотУзел());
	
	рез = запрос.Выполнить().Выбрать();
	
	Если рез.Следующий() Тогда 
		УзелОбмена = рез.ссылка;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Параметры.ВыгрузкаБекапаНаПочту Тогда 
		ПодключитьОбработчикОжидания("Подключаемый_ВыгрузитьБекапНаПочту", 0.1, Истина);
	КонецЕсли;
	
	ЗаполнитьДеревоРегистрации();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура УзелОбменаПриИзменении(Элемент)
	ЗаполнитьДеревоРегистрации();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыгрузитьДанные(Команда)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Заголовок = НСтр("ru = 'Укажите каталог информационной базы:'");
	
	Диалог.Показать(Новый ОписаниеОповещения("ВыгрузитьДанныеВопросЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРегистрацию(Команда)
	УдалитьРегистрациюНаСервере();
	
	ЗаполнитьДеревоРегистрации();
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьВсё(Команда)
	ЗарегистрироватьВсёНаСервере();
	
	Сообщить("Готово");
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Заголовок = НСтр("ru = 'Укажите каталог информационной базы:'");
	
	Диалог.Показать(Новый ОписаниеОповещения("ЗагрузитьДанныеВопросЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсеДанные(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьВсеДанныеВопросЗавершение", ЭтотОбъект), НСтр("ru = 'Удалить все данные?'"),
	РежимДиалогаВопрос.ОКОтмена);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаКурсовВалют(Команда)
	ОткрытьФорму("Обработка.ЗагрузкаКурсовВалют.Форма.Форма");
	ЭтаФорма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьБекапНаПочту(Команда)
	
	ОП = Новый ОписаниеОповещения("ВыгрузитьБекапНаПочтуВопросЗавершение", ЭтотОбъект);
	
	ПоказатьВопрос(ОП, "Выгрузить бекап?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьБекапНаПочтуВопросЗавершение(Ответ, ДопПараметры) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда 
		Возврат;
	КонецЕсли;
	
	ОписаниеЗавершения = Новый ОписаниеОповещения("ПослеВыгрузкиБекапа", ЭтотОбъект);
	
	Результат = ВыгрузитьБекапПочтыНаСервере();
	
	Если Результат.ЗаданиеВыполнено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеЗавершения);
		
		Возврат;
	КонецЕсли;
	
	// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	
	ПараметрыОбработчикаОжидания.ОписаниеЗавершения = ОписаниеЗавершения;
	ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала = 1;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МаксСообщениеРегистрации(Команда)
	МаксСообщениеРегистрацииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьБекапПочты2(Команда)
	
	ОП = новый ОписаниеОповещения("ЗавершениеВыбораФайлаБекапа", ЭтотОбъект, новый Структура("РучнаяЗагрузкаXML", Истина));
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Фильтр = НСтр("ru = 'XML'; en = 'XML'") + "(*.xml)|*.xml";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите файлы";
	ДиалогОткрытияФайла.Каталог = ЗначениеНастроекВызовСервераПовтИсп.КаталогХраненияФайлов();
	ДиалогОткрытияФайла.Показать(ОП);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКурсыВалют(Команда)
	ПоказатьВопрос(новый ОписаниеОповещения("ОчиститьКурсыВалютВопросЗавершение", ЭтотОбъект),
	НСтр("ru = 'Будут удалены все курсы валют. Продолжить?'"), РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыгрузитьДанныеВопросЗавершение(Результат, ДопПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекКаталог = Результат;
	
	ВыгрузитьДанныеНаСервере(УзелОбмена, ТекКаталог);			
	
	Сообщить(НСтр("ru = 'Готово'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеВопросЗавершение(Результат, ДопПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекКаталог = Результат;
	
	ЗагрузитьДанныеНаСервере(УзелОбмена, текКаталог);
	
	Оповестить("ОбновитьОстатки");
	
	Сообщить(НСтр("ru = 'Готово'"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			
			Если ДлительныеОперацииВызовСервера.ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				
				Если ПараметрыОбработчикаОжидания.Свойство("ОписаниеЗавершения") Тогда 
					ВыполнитьОбработкуОповещения(ПараметрыОбработчикаОжидания.ОписаниеЗавершения);
				КонецЕсли;
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайла(результат, ДопПараметры) Экспорт 
	Если результат <> Неопределено Тогда 
		ПолноеИмяФайла = результат;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоРегистрацииСерв(масРазвернуть)
	масМетаданных = новый Массив;
	масМетаданных.Добавить("Константы");
	масМетаданных.Добавить("Справочники");
	масМетаданных.Добавить("Документы");
	масМетаданных.Добавить("РегистрыНакопления");
	масМетаданных.Добавить("РегистрыСведений");
	
	ДеревоОбъектов.ПолучитьЭлементы().Очистить();
	
	Для Каждого имяМета из масМетаданных Цикл
		новСтрМета = ДеревоОбъектов.ПолучитьЭлементы().Добавить();
		новСтрМета.Наименование = имяМета;
		
		Всего = 0;
		Выгруженных = 0;
		невыгруженных = 0;
		
		Для Каждого текМета из Метаданные[имяМета] Цикл
			Если Метаданные.ПланыОбмена.Мобильные.Состав.Найти(текМета) <> Неопределено Тогда 						
				новСтр = новСтрМета.ПолучитьЭлементы().Добавить();
				новСтр.Наименование = текМета.имя;
				новСтр.МетаПолноеИмя = текМета.полноеИмя();
				
				структ = ПолучитьКоличествоЗарегистрированныхОбъектовДляМетаданногоПоУзлу(текМета);
				
				новСтр.количествоСтрокой = "" + структ.Всего + "/" + структ.Выгруженных + "/" + структ.НеВыгруженных;
				
				Если структ.всего > 0 Тогда 
					масРазвернуть.Добавить(новСтрМета.ПолучитьИдентификатор());
					
					Всего = всего + структ.всего;
					Выгруженных = Выгруженных + структ.Выгруженных;
					НеВыгруженных = НеВыгруженных + структ.НеВыгруженных;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если новСтрМета.ПолучитьЭлементы().Количество() = 0 Тогда 
			ДеревоОбъектов.ПолучитьЭлементы().Удалить(новСтрМета);			
		Иначе
			новСтрМета.количествоСтрокой = "" + Всего + "/" + Выгруженных + "/" + НеВыгруженных;			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоРегистрации()
	масРазвернуть = новый Массив;
	
	ЗаполнитьДеревоРегистрацииСерв(масРазвернуть);
	
	Для Каждого стр из масРазвернуть Цикл
		Элементы.ДеревоОбъектов.Развернуть(стр);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция МетаданныеПоПолномуИмени(ИмяМетаданных) Экспорт
	
	Если ПустаяСтрока(ИмяМетаданных) Тогда
		// Вся конфигурация
		Возврат Метаданные;
	КонецЕсли;
	
	Значение = Метаданные.НайтиПоПолномуИмени(ИмяМетаданных);
	Если Значение = Неопределено Тогда
		Значение = Метаданные[ИмяМетаданных];
	КонецЕсли;
	
	Возврат Значение;
КонецФункции

&НаСервере
Функция УдалитьВсеДанныеНаСервере()	
	
	ПараметрыЗадания = Новый Структура();
	
	Попытка
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор, "ОбщегоНазначения.УдалитьВсеДанныеНаСервере",
		ПараметрыЗадания, НСтр("ru = 'Удаление всех данных'"));		
	Исключение
		Сообщить(ОписаниеОшибки());
		ВызватьИсключение;
	КонецПопытки;
	
	АдресХранилища = Результат.АдресХранилища;
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УдалитьВсеДанныеВопросЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда 
		Возврат;			
	КонецЕсли;
	
	ОписаниеЗавершения = Новый ОписаниеОповещения("ПослеУдаленияВсехДанных", ЭтотОбъект);
	
	Результат = УдалитьВсеДанныеНаСервере();
	
	Если Результат.ЗаданиеВыполнено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеЗавершения);
		
		Возврат;
	КонецЕсли;
	
	// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	
	ПараметрыОбработчикаОжидания.ОписаниеЗавершения = ОписаниеЗавершения;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаленияВсехДанных(Результат, ДопПараметры) Экспорт 	
	
	#Если МобильноеПриложениеКлиент  Тогда 
		
		СредстваМультимедиа.ВоспроизвестиЗвуковоеОповещение(ЗвуковоеОповещение.ПоУмолчанию, Истина);
		
	#КонецЕсли
	
	ПоказатьПредупреждение(Новый ОписаниеОповещения("ПослеУдаленияВсехДанныхПредупреждениеЗавершение", ЭтотОбъект),
	НСтр("ru = 'Выполнено успешно'"));	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаленияВсехДанныхПредупреждениеЗавершение(ДопПараметры) Экспорт 
	
	ОбновитьИнтерфейс();
	
	Оповестить("ОбновитьОстатки");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыгрузитьДанныеНаСервере(Узел, Каталог)	
	УзелОбъект = Узел.ПолучитьОбъект();
	УзелОбъект.ЗаписатьСообщениеСИзменениями(Каталог);
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьВсёНаСервере()
	ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена);
КонецПроцедуры

&НаСервере
Функция ПолучитьКоличествоЗарегистрированныхОбъектовДляМетаданногоПоУзлу(МетаданныеОбъекта)
	
	Запрос = Новый Запрос();
	
	ИмяТаблицыДляПоискаЗарегистрированных = ПолучитьПоМетаданномуНазвание(МетаданныеОбъекта);
	
	Если ПустаяСтрока(ИмяТаблицыДляПоискаЗарегистрированных) Тогда
		Возврат 0;
	КонецЕсли;
	
	ИмяТаблицыДляПоискаЗарегистрированных = ИмяТаблицыДляПоискаЗарегистрированных + "." + МетаданныеОбъекта.Имя + ".Изменения";
	
	Запрос.Текст = "ВЫБРАТЬ Количество(*) КАК Всего,
	|	КОЛИЧЕСТВО(НомерСообщения) КАК Выгруженных,
	|	КОЛИЧЕСТВО(*) - КОЛИЧЕСТВО(НомерСообщения) КАК Невыгруженных
	|ИЗ
	|	" + ИмяТаблицыДляПоискаЗарегистрированных + " КАК РегистрацияИзменений
	|ГДЕ
	|РегистрацияИзменений.Узел = &Узел";
	
	Запрос.УстановитьПараметр("Узел", УзелОбмена);
	
	рез = Запрос.Выполнить();	
	
	структ = новый Структура("Всего, Выгруженных, Невыгруженных");
	
	Если рез.Пустой() Тогда
		Возврат структ;
	Иначе
		выборка = рез.Выбрать();
		выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(структ, выборка);
		Возврат структ;		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьПоМетаданномуНазвание(МетаданныеОбъекта)
	
	НазваниеМетаданных = "";
	
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "Справочник";
		
	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "Документ";
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "РегистрСведений";
		
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "РегистрНакопления";
		
	ИначеЕсли Метаданные.Константы.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "Константа";
		
	Иначе
		
		НазваниеМетаданных = "";	
		
	КонецЕсли;
	
	Возврат НазваниеМетаданных;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗагрузитьДанныеНаСервере(Узел, Каталог)	
	УзелОбъект = Узел.ПолучитьОбъект();
	УзелОбъект.ПрочитатьСообщениеСИзменениями(Каталог);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыгрузитьБекапНаПочту() Экспорт 
	ВыгрузитьБекапНаПочтуВопросЗавершение(КодВозвратаДиалога.Да, Неопределено);
КонецПроцедуры

&НаСервере
Функция ВыгрузитьБекапПочтыНаСервере()	
	
	ПараметрыЗадания = новый Структура;
	
	Попытка
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор, "БекапЧерезПочту.ВыгрузитьБекапНаПочту",
		ПараметрыЗадания, НСтр("ru = 'Загрузка бекапа'"));		
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
	АдресХранилища = Результат.АдресХранилища;
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Возврат Результат;	
	
КонецФункции

&НаКлиенте
Процедура ПослеВыгрузкиБекапа(Результат, ДопПараметры) Экспорт 	
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске();
	
	ПоказатьПредупреждение(новый ОписаниеОповещения("ПослеВыгрузкиБекапаПредупреждениеЗавершение", ЭтотОбъект), НСтр("ru = 'Выполнено успешно'"));	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыгрузкиБекапаПредупреждениеЗавершение(ДопПараметры) Экспорт 
	Закрыть();
КонецПроцедуры

&НаСервере
Процедура УдалитьРегистрациюНаСервере()
	текСтр = ДеревоОбъектов.НайтиПоИдентификатору(Элементы.ДеревоОбъектов.ТекущаяСтрока);
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, МетаданныеПоПолномуИмени(текСтр.МетаПолноеИмя));
КонецПроцедуры

&НаСервере
Процедура МаксСообщениеРегистрацииНаСервере()
	запрос = новый запрос("ВЫБРАТЬ
	|	МАКСИМУМ(Операция.НомерСообщения) КАК НомерСообщения,
	|	МАКСИМУМ(Операция.Ссылка) КАК Ссылка
	|ИЗ
	|	Документ.Операция.Изменения КАК Операция
	|ГДЕ
	|	Операция.Узел = &Узел");
	запрос.УстановитьПараметр("узел", УзелОбмена);
	
	рез = запрос.Выполнить().Выбрать();
	
	Если рез.Следующий() Тогда 
		сообщить("№:" + рез.номерСообщения);
		сообщить("ссылка:" + рез.ссылка);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораФайлаБекапа(ВыбранныеФайлы, ДопПараметры) Экспорт 	
	
	Если ВыбранныеФайлы = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ВыбранныеФайлы[0];
	
	описаниеЗавершения = новый ОписаниеОповещения("ПослеЗагрузкиБекапа", ЭтотОбъект);
	
	Результат = ЗагрузитьБекапПочтыНаСервере(ИмяФайла, ДопПараметры);
	
	Если Результат.ЗаданиеВыполнено Тогда
		ВыполнитьОбработкуОповещения(описаниеЗавершения);
		
		Возврат;
	КонецЕсли;
	
	// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	
	ПараметрыОбработчикаОжидания.описаниеЗавершения = описаниеЗавершения;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания, Истина, Истина);
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьБекапПочтыНаСервере(имяФайла, ДопПараметры)	
	ПараметрыЗадания = новый Структура("ИмяФайла", имяФайла);
	
	Если ДопПараметры.свойство("РучнаяЗагрузкаXML") Тогда 
		ПараметрыЗадания.Вставить("РучнаяЗагрузкаXML");
	КонецЕсли;
	
	Попытка
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор, "БекапЧерезПочту.ЗагрузитьБекапПочтыНаСервере",
		ПараметрыЗадания, НСтр("ru = 'Загрузка бекапа'"));		
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
	АдресХранилища = Результат.АдресХранилища;
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Возврат Результат;	
КонецФункции

&НаКлиенте
Процедура ПослеЗагрузкиБекапа(результат, ДопПараметры) Экспорт 
	
	ПослеЗагрузкиБекапаСервер();
	
	#Если МобильноеПриложениеКлиент  Тогда 
		
		СредстваМультимедиа.ВоспроизвестиЗвуковоеОповещение(ЗвуковоеОповещение.ПоУмолчанию, Истина);
		
	#КонецЕсли
	
	ПоказатьПредупреждение(Новый ОписаниеОповещения("ПослеЗагрузкиБекапаПредупреждениеЗавершение", ЭтотОбъект),
	НСтр("ru = 'Выполнено успешно'"));	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗагрузкиБекапаПредупреждениеЗавершение(ДопПараметры) Экспорт 
	
	Оповестить("ОбновитьОстатки");
	Оповестить("ЗагруженБекап");
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗагрузкиБекапаСервер()	
	
	Константы.ТекущаяВерсияПриложения.Установить("");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьКурсыВалютНаСервере()
	набор = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
	набор.Прочитать();
	набор.Очистить();
	набор.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКурсыВалютВопросЗавершение(Результат, ДопПараметры) Экспорт 
	Если Результат = КодВозвратаДиалога.Отмена Тогда 
		Возврат;
	КонецЕсли;
	
	ОчиститьКурсыВалютНаСервере();	
КонецПроцедуры

#КонецОбласти
