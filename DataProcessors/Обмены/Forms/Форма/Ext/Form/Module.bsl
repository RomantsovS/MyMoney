&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	#Если МобильноеПриложениеСервер Тогда
		Разделитель = "/";
	#Иначе
		Разделитель = "\";
		
		Элементы.Группа1.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Параметры.ВыгрузкаРезервнойКопииНаПочту Тогда 
		ПодключитьОбработчикОжидания("Подключаемый_ВыгрузитьРезервнуюКопиюНаПочту", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыгрузитьДанные(Команда)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Заголовок = НСтр("ru = 'Укажите каталог информационной базы:'");
	
	Диалог.Показать(Новый ОписаниеОповещения("ВыгрузитьДанныеВопросЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Заголовок = НСтр("ru = 'Укажите каталог информационной базы:'");
	
	Диалог.Показать(Новый ОписаниеОповещения("ЗагрузитьДанныеВопросЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсеДанные(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьВсеДанныеВопросЗавершение", ЭтотОбъект), НСтр("ru = 'Удалить все данные?'"),
	РежимДиалогаВопрос.ОКОтмена);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаКурсовВалют(Команда)
	ОткрытьФорму("Обработка.ЗагрузкаКурсовВалют.Форма.Форма");
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьРезервнуюКопиюНаПочту(Команда)
	
	ОП = Новый ОписаниеОповещения("ВыгрузитьРезервнуюКопиюНаПочтуВопросЗавершение", ЭтотОбъект);
	
	ПоказатьВопрос(ОП, НСтр("ru = 'Выгрузить резервную копию?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьРезервнуюКопиюНаПочтуВопросЗавершение(Ответ, ДопПараметры) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда 
		Возврат;
	КонецЕсли;
	
	ОписаниеЗавершения = Новый ОписаниеОповещения("ПослеВыгрузкиРезервнойКопии", ЭтотОбъект);
	
	Результат = ВыгрузитьРезервнуюКопиюПочтыНаСервере();
	
	Если Результат.ЗаданиеВыполнено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеЗавершения);
		
		Возврат;
	КонецЕсли;
	
	// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	
	ПараметрыОбработчикаОжидания.ОписаниеЗавершения = ОписаниеЗавершения;
	ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала = 1;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МаксСообщениеРегистрации(Команда)
	МаксСообщениеРегистрацииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРезервнуюКопиюПочты(Команда)
	
	ОП = Новый ОписаниеОповещения("ЗавершениеВыбораФайлаРезервнойКопии", ЭтотОбъект, Новый Структура("РучнаяЗагрузкаXML", Истина));
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Фильтр = НСтр("ru = 'XML'; en = 'XML'") + "(*.xml)|*.xml";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите файлы";
	ДиалогОткрытияФайла.Каталог = ЗначениеНастроекВызовСервераПовтИсп.КаталогХраненияФайлов();
	ДиалогОткрытияФайла.Показать(ОП);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораФайлаРезервнойКопии(ВыбранныеФайлы, ДопПараметры) Экспорт 
	
	Если ВыбранныеФайлы = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ВыбранныеФайлы[0];
	
	ОписаниеЗавершения = Новый ОписаниеОповещения("ПослеЗагрузкиРезервнойКопии", ЭтотОбъект);
	
	Результат = ЗагрузитьРезервнуюКопиюПочтыНаСервере(ИмяФайла, ДопПараметры);
	
	Если Результат.ЗаданиеВыполнено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеЗавершения);
		
		Возврат;
	КонецЕсли;
	
	// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	
	ПараметрыОбработчикаОжидания.ОписаниеЗавершения = ОписаниеЗавершения;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКурсыВалют(Команда)
	ПоказатьВопрос(новый ОписаниеОповещения("ОчиститьКурсыВалютВопросЗавершение", ЭтотОбъект),
	НСтр("ru = 'Будут удалены все курсы валют. Продолжить?'"), РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыгрузитьДанныеВопросЗавершение(Результат, ДопПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекКаталог = Результат;
	
	ВыгрузитьДанныеНаСервере(УзелОбмена, ТекКаталог);			
	
	Сообщить(НСтр("ru = 'Готово'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеВопросЗавершение(Результат, ДопПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекКаталог = Результат;
	
	ЗагрузитьДанныеНаСервере(УзелОбмена, текКаталог);
	
	Оповестить("ОбновитьОстатки");
	
	Сообщить(НСтр("ru = 'Готово'"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			
			Если ДлительныеОперацииВызовСервера.ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				
				Если ПараметрыОбработчикаОжидания.Свойство("ОписаниеЗавершения") Тогда 
					ВыполнитьОбработкуОповещения(ПараметрыОбработчикаОжидания.ОписаниеЗавершения);
				КонецЕсли;
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайла(результат, ДопПараметры) Экспорт 
	Если результат <> Неопределено Тогда 
		ПолноеИмяФайла = результат;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция МетаданныеПоПолномуИмени(ИмяМетаданных) Экспорт
	
	Если ПустаяСтрока(ИмяМетаданных) Тогда
		// Вся конфигурация
		Возврат Метаданные;
	КонецЕсли;
	
	Значение = Метаданные.НайтиПоПолномуИмени(ИмяМетаданных);
	Если Значение = Неопределено Тогда
		Значение = Метаданные[ИмяМетаданных];
	КонецЕсли;
	
	Возврат Значение;
КонецФункции

&НаСервере
Функция УдалитьВсеДанныеНаСервере()	
	
	ПараметрыЗадания = Новый Структура();
	
	Попытка
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор, "ОбщегоНазначения.УдалитьВсеДанныеНаСервере",
		ПараметрыЗадания, НСтр("ru = 'Удаление всех данных'"));		
	Исключение
		Сообщить(ОписаниеОшибки());
		ВызватьИсключение;
	КонецПопытки;
	
	АдресХранилища = Результат.АдресХранилища;
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УдалитьВсеДанныеВопросЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда 
		Возврат;			
	КонецЕсли;
	
	ОписаниеЗавершения = Новый ОписаниеОповещения("ПослеУдаленияВсехДанных", ЭтотОбъект);
	
	Результат = УдалитьВсеДанныеНаСервере();
	
	Если Результат.ЗаданиеВыполнено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеЗавершения);
		
		Возврат;
	КонецЕсли;
	
	// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	
	ПараметрыОбработчикаОжидания.ОписаниеЗавершения = ОписаниеЗавершения;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаленияВсехДанных(Результат, ДопПараметры) Экспорт 	
	
	#Если МобильноеПриложениеКлиент  Тогда 
		
		СредстваМультимедиа.ВоспроизвестиЗвуковоеОповещение(ЗвуковоеОповещение.ПоУмолчанию, Истина);
		
	#КонецЕсли
	
	ПоказатьПредупреждение(Новый ОписаниеОповещения("ПослеУдаленияВсехДанныхПредупреждениеЗавершение", ЭтотОбъект),
	НСтр("ru = 'Выполнено успешно'"));	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаленияВсехДанныхПредупреждениеЗавершение(ДопПараметры) Экспорт 
	
	ОбновитьИнтерфейс();
	
	Оповестить("ОбновитьОстатки");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыгрузитьДанныеНаСервере(Узел, Каталог)	
	УзелОбъект = Узел.ПолучитьОбъект();
	УзелОбъект.ЗаписатьСообщениеСИзменениями(Каталог);
КонецПроцедуры

&НаСервере
Функция ПолучитьПоМетаданномуНазвание(МетаданныеОбъекта)
	
	НазваниеМетаданных = "";
	
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "Справочник";
		
	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "Документ";
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "РегистрСведений";
		
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "РегистрНакопления";
		
	ИначеЕсли Метаданные.Константы.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "Константа";
		
	Иначе
		
		НазваниеМетаданных = "";	
		
	КонецЕсли;
	
	Возврат НазваниеМетаданных;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗагрузитьДанныеНаСервере(Узел, Каталог)
	УзелОбъект = Узел.ПолучитьОбъект();
	УзелОбъект.ПрочитатьСообщениеСИзменениями(Каталог);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыгрузитьРезервнуюКопиюНаПочту() Экспорт 
	ВыгрузитьРезервнуюКопиюНаПочтуВопросЗавершение(КодВозвратаДиалога.Да, Неопределено);
КонецПроцедуры

&НаСервере
Функция ВыгрузитьРезервнуюКопиюПочтыНаСервере()
	
	ПараметрыЗадания = Новый Структура;
	
	Попытка
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор, "РезервноеКопированиеЧерезПочтуВызовСервера.ВыгрузитьРезервнуюКопиюНаПочту",
		ПараметрыЗадания, НСтр("ru = 'Загрузка резервной копии'"));
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
	АдресХранилища = Результат.АдресХранилища;
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Возврат Результат;	
	
КонецФункции

&НаКлиенте
Процедура ПослеВыгрузкиРезервнойКопии(Результат, ДопПараметры) Экспорт 	
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске();
	
	ПоказатьПредупреждение(новый ОписаниеОповещения("ПослеВыгрузкиРезервнойКопииПредупреждениеЗавершение", ЭтотОбъект), НСтр("ru = 'Выполнено успешно'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыгрузкиРезервнойКопииПредупреждениеЗавершение(ДопПараметры) Экспорт 
	Закрыть();
КонецПроцедуры

&НаСервере
Процедура МаксСообщениеРегистрацииНаСервере()
	запрос = Новый запрос("ВЫБРАТЬ
	|	МАКСИМУМ(Операция.НомерСообщения) КАК НомерСообщения,
	|	МАКСИМУМ(Операция.Ссылка) КАК Ссылка
	|ИЗ
	|	Документ.Операция.Изменения КАК Операция
	|ГДЕ
	|	Операция.Узел = &Узел");
	запрос.УстановитьПараметр("узел", УзелОбмена);
	
	рез = запрос.Выполнить().Выбрать();
	
	Если рез.Следующий() Тогда 
		сообщить("№:" + рез.номерСообщения);
		сообщить("ссылка:" + рез.ссылка);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьРезервнуюКопиюПочтыНаСервере(ИмяФайла, ДопПараметры)
	ПараметрыЗадания = Новый Структура("ИмяФайла", ИмяФайла);
	
	Если ДопПараметры.свойство("РучнаяЗагрузкаXML") Тогда 
		ПараметрыЗадания.Вставить("РучнаяЗагрузкаXML");
	КонецЕсли;
	
	Попытка
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор, "РезервноеКопированиеЧерезПочтуВызовСервера.ЗагрузитьРезервнуюКопиюПочтыНаСервере",
		ПараметрыЗадания, НСтр("ru = 'Загрузка резервной копии'"));
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
	АдресХранилища = Результат.АдресХранилища;
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Возврат Результат;	
КонецФункции

&НаКлиенте
Процедура ПослеЗагрузкиРезервнойКопии(результат, ДопПараметры) Экспорт 
	
	ПослеЗагрузкиРезервнойКопииСервер();
	
	#Если МобильноеПриложениеКлиент  Тогда 
		
		СредстваМультимедиа.ВоспроизвестиЗвуковоеОповещение(ЗвуковоеОповещение.ПоУмолчанию, Истина);
		
	#КонецЕсли
	
	ПоказатьПредупреждение(Новый ОписаниеОповещения("ПослеЗагрузкиРезервнойКопииПредупреждениеЗавершение", ЭтотОбъект),
	НСтр("ru = 'Выполнено успешно'"));	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗагрузкиРезервнойКопииПредупреждениеЗавершение(ДопПараметры) Экспорт 
	
	Оповестить("ОбновитьОстатки");
	Оповестить("ЗагруженаРезервнаяКопия");
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗагрузкиРезервнойКопииСервер()
	
	Константы.ТекущаяВерсияПриложения.Установить("");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьКурсыВалютНаСервере()
	набор = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
	набор.Прочитать();
	набор.Очистить();
	набор.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКурсыВалютВопросЗавершение(Результат, ДопПараметры) Экспорт 
	Если Результат = КодВозвратаДиалога.Отмена Тогда 
		Возврат;
	КонецЕсли;
	
	ОчиститьКурсыВалютНаСервере();	
КонецПроцедуры

#КонецОбласти
