#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)	
	
	Если ТипОперации = Перечисления.ТипыОпераций.Долги Тогда 
		Если ТипДолга = Перечисления.ТипыДолгов.Зачисление Или ТипДолга = Перечисления.ТипыДолгов.Списание Тогда 
			Кошелек = Неопределено;
		КонецЕсли;
	Иначе
		ТипДолга = Перечисления.ТипыДолгов.ПустаяСсылка();
	КонецЕсли;
	
	Если ТипОперации <> Перечисления.ТипыОпераций.Долги И Не ОбщиеЗатраты Тогда 
		ФизЛицо = Неопределено;
	КонецЕсли;
	
	Если Не (ТипОперации = Перечисления.ТипыОпераций.Доход Или 
		ТипОперации = Перечисления.ТипыОпераций.Расход Или 
		ТипОперации = Перечисления.ТипыОпераций.Сторно) Тогда 
		ОбщиеЗатраты = 0;
	КонецЕсли;
		
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	Если ДанныеЗаполнения <> Неопределено Тогда 
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		
		Если ЗначениеЗаполнено(Основание) Тогда 
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание,
			"Кошелек, Статья, Сумма, Комментарий, ФизЛицо, Метка, ОбщиеЗатраты, СуммаОбщиеЗатраты, СуммаДолг, Валюта");
			
			ТипОперации = Перечисления.ТипыОпераций.Сторно;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)		
	Если ТипОперации = Перечисления.ТипыОпераций.Перевод Тогда 		
		ПроверяемыеРеквизиты.добавить("КошелекПриемник");
		ПроверяемыеРеквизиты.добавить("СуммаПриемник");
		ПроверяемыеРеквизиты.добавить("Кошелек");
	ИначеЕсли ТипОперации = Перечисления.ТипыОпераций.Долги Тогда
		ПроверяемыеРеквизиты.добавить("физлицо");
		ПроверяемыеРеквизиты.добавить("ТипДолга");
		ПроверяемыеРеквизиты.добавить("Сумма");
		
		Если ТипДолга = Перечисления.ТипыДолгов.Дебет Или ТипДолга = Перечисления.ТипыДолгов.Кредит Тогда 
			ПроверяемыеРеквизиты.добавить("Кошелек");
		ИначеЕсли ТипДолга = Перечисления.ТипыДолгов.Взаимозачет Тогда 
			Если Метка = МеткаОтправитель Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Для вида долга Взаимозачет необходимо указать различных метки'"), ЭтотОбъект, "Метка", , Отказ);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипОперации = Перечисления.ТипыОпераций.Сторно Тогда
		ПроверяемыеРеквизиты.добавить("Основание");
	Иначе
		ПроверяемыеРеквизиты.добавить("Статья");
		
		Если ОбщиеЗатраты Тогда 
			ПроверяемыеРеквизиты.добавить("СуммаОбщиеЗатраты");
			ПроверяемыеРеквизиты.добавить("физлицо");
		Иначе
			ПроверяемыеРеквизиты.добавить("Сумма");
			//ПроверяемыеРеквизиты.добавить("Кошелек");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.Операция.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ПроведениеСерверУТ.ОтразитьДолги(ДополнительныеСвойства, Движения, Отказ);
	ПроведениеСерверУТ.ОтразитьЗатраты(ДополнительныеСвойства, Движения, Отказ);
	ПроведениеСерверУТ.ОтразитьЗатратыОбщие(ДополнительныеСвойства, Движения, Отказ);
	ПроведениеСерверУТ.ОтразитьКошельки(ДополнительныеСвойства, Движения, Отказ);
	ПроведениеСерверУТ.ОтразитьКошелькиПартии(ДополнительныеСвойства, Движения, Отказ);
	ПроведениеСерверУТ.ОтразитьПокупкиВалюты(ДополнительныеСвойства, Движения, Отказ);
	ПроведениеСерверУТ.ОтразитьПродажиВалюты(ДополнительныеСвойства, Движения, Отказ);
	
	Движения.КошелькиПартии.Записывать = Истина;
	Движения.ПокупкиВалюты.Записывать = Истина;
	Движения.ПродажиВалюты.Записывать = Истина;
	
	Если ТипОперации = Перечисления.ТипыОпераций.Перевод Тогда		
		//1. Списываем с кошелька-источника
		//Движение = Движения.Кошельки.Добавить();
		//Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		//Движение.Период = Дата;
		//Движение.Кошелек = Кошелек;
		//Движение.Сумма = Сумма;
		//Движение.Валюта = Валюта;
		//
		//ВалютаПриемник = КошелекПриемник.Валюта;
		//
		////2. Добавляем в кошелек-получатель
		//Движение = Движения.Кошельки.Добавить();
		//Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		//Движение.Период = Дата;
		//Движение.Кошелек = КошелекПриемник;
		//Движение.Сумма = СуммаПриемник;
		//Движение.Валюта = ВалютаПриемник;
		
		ВыполнитьДвиженияПоРегиструПартий(РежимПроведения);
	ИначеЕсли ТипОперации = Перечисления.ТипыОпераций.Долги Тогда
		Если ТипДолга = Перечисления.ТипыДолгов.Дебет Или ТипДолга = Перечисления.ТипыДолгов.Кредит Тогда 
			//Движение = Движения.Кошельки.Добавить();
			//Движение.ВидДвижения = ?(ТипДолга = Перечисления.ТипыДолгов.Дебет, ВидДвиженияНакопления.Расход, ВидДвиженияНакопления.Приход);
			//Движение.Период = Дата;
			//Движение.Кошелек = Кошелек;
			//Движение.Сумма = Сумма;
			//Движение.Валюта = Валюта;
		Иначе
			//Если ЗначениеЗаполнено(Статья) Тогда 
			//	ДвижениеЗатраты = Движения.Затраты.Добавить();
			//	ДвижениеЗатраты.Период = Дата;
			//	ДвижениеЗатраты.Статья = Статья;
			//	ДвижениеЗатраты.Сумма = ?(ТипДолга = Перечисления.ТипыДолгов.Зачисление, Сумма, -Сумма);
			//	ДвижениеЗатраты.ТипОперации = ?(ТипДолга = Перечисления.ТипыДолгов.Зачисление, Перечисления.ТипыОпераций.Доход,
			//	Перечисления.ТипыОпераций.Расход);
			//	ДвижениеЗатраты.Валюта = Валюта;
			//	ДвижениеЗатраты.Метка = Метка;
			//КонецЕсли;
		КонецЕсли;
	
		//Если СуммаДолг = 0 Тогда 
		//	Движение = Движения.Долги.Добавить();
		//	Если ТипДолга = Перечисления.ТипыДолгов.Дебет Или ТипДолга = Перечисления.ТипыДолгов.Зачисление Или 
		//		ТипДолга = Перечисления.ТипыДолгов.Взаимозачет Тогда 
		//		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		//	Иначе
		//		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		//	КонецЕсли;
		//	Движение.Период = Дата;
		//	Движение.ФизЛицо = ФизЛицо;
		//	Движение.Валюта = Валюта;
		//	Движение.Метка = Метка;
		//	Движение.Сумма = Сумма;
		//	
		//	Если ТипДолга = Перечисления.ТипыДолгов.Взаимозачет Тогда 
		//		Движение = Движения.Долги.Добавить();
		//		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		//		Движение.Период = Дата;
		//		Движение.ФизЛицо = ФизЛицо;
		//		Движение.Валюта = Валюта;
		//		Движение.Метка = Метка1;
		//		Движение.Сумма = Сумма;
		//	КонецЕсли;
		//Иначе
		//	Движение = Движения.Долги.Добавить();
		//	Если ТипДолга = Перечисления.ТипыДолгов.Дебет или ТипДолга = Перечисления.ТипыДолгов.Зачисление Тогда 
		//		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		//	Иначе
		//		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		//	КонецЕсли;
		//	Движение.Период = Дата;
		//	Движение.ФизЛицо = ФизЛицо;
		//	Движение.Валюта = Валюта;
		//	Движение.Метка = Справочники.Метки.ПустаяСсылка();
		//	Движение.Сумма = Сумма - СуммаДолг;
		//	
		//	Движение = Движения.Долги.Добавить();
		//	Если ТипДолга = Перечисления.ТипыДолгов.Дебет или ТипДолга = Перечисления.ТипыДолгов.Зачисление Тогда 
		//		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		//	Иначе
		//		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		//	КонецЕсли;
		//	Движение.Период = Дата;
		//	Движение.ФизЛицо = ФизЛицо;
		//	Движение.Валюта = Валюта;
		//	Движение.Метка = Метка;
		//	Движение.Сумма = СуммаДолг;
		//КонецЕсли;
	Иначе		
		Если ЗначениеЗаполнено(Кошелек) И Сумма > 0 Тогда  
			// регистр Кошельки Расход
			//Движение = Движения.Кошельки.Добавить();
			//Если ТипОперации = Перечисления.ТипыОпераций.Сторно Тогда 
			//	Движение.ВидДвижения = ?(Основание.ТипОперации = Перечисления.ТипыОпераций.Доход, ВидДвиженияНакопления.Расход, ВидДвиженияНакопления.Приход);
			//Иначе
			//	Движение.ВидДвижения = ?(ТипОперации = Перечисления.ТипыОпераций.Доход, ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход);
			//КонецЕсли;
			//Движение.Период = Дата;
			//Движение.Кошелек = Кошелек;
			//Движение.Сумма = Сумма;
			//Движение.Валюта = Валюта;
		КонецЕсли;
		
		СуммаЗатраты = Неопределено;
		
		Если ОбщиеЗатраты Тогда // регистр Затраты общие
			//Движение = Движения.ЗатратыОбщие.Добавить();
			//Движение.Период = Дата;
			//Движение.Статья = Статья;
			//Если ТипОперации = Перечисления.ТипыОпераций.Сторно Тогда 
			//	Движение.Сумма = ?(Основание.ТипОперации = Перечисления.ТипыОпераций.Доход, -СуммаОбщиеЗатраты, СуммаОбщиеЗатраты);
			//Иначе
			//	Движение.Сумма = ?(ТипОперации = Перечисления.ТипыОпераций.Доход, СуммаОбщиеЗатраты, -СуммаОбщиеЗатраты);
			//КонецЕсли;
			//Движение.Кошелек = Кошелек;
			//Движение.ТипОперации = ТипОперации;
			//Движение.Валюта = Валюта;
			//Движение.Метка = Метка;
			
			Если ЗначениеЗаполнено(ФизЛицо) И СуммаДолг <> 0 Тогда 
				//Движение = Движения.Долги.Добавить();
				//
				//Если ТипОперации = Перечисления.ТипыОпераций.Сторно Тогда 
				//	Движение.ВидДвижения = ?(СуммаОбщиеЗатраты - Сумма >= СуммаДолг, ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход);
				//Иначе
				//	Движение.ВидДвижения = ?(СуммаОбщиеЗатраты - Сумма >= СуммаДолг, ВидДвиженияНакопления.Расход, ВидДвиженияНакопления.Приход);
				//КонецЕсли;
				//
				//Движение.Период = Дата;
				//Движение.ФизЛицо = ФизЛицо;
				//Движение.Валюта = Валюта;
				//Движение.Метка = Метка;
				//Движение.Сумма = СуммаДолг;
				
				СуммаЗатраты = ?(Сумма = 0, -СуммаДолг, СуммаДолг - Сумма);
				
				Если ТипОперации = Перечисления.ТипыОпераций.Сторно И Основание.ТипОперации = Перечисления.ТипыОпераций.Расход Тогда 
					СуммаЗатраты = -СуммаЗатраты;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// регистр Затраты 
		//ДвижениеЗатраты = Движения.Затраты.Добавить();
		//ДвижениеЗатраты.Период = Дата;
		//ДвижениеЗатраты.Статья = Статья;
		//Если ТипОперации = Перечисления.ТипыОпераций.Сторно Тогда 
		//	ДвижениеЗатраты.Сумма = ?(Основание.ТипОперации = Перечисления.ТипыОпераций.Доход, -Сумма, Сумма);
		//Иначе
		//	ДвижениеЗатраты.Сумма = ?(ТипОперации = Перечисления.ТипыОпераций.Доход, Сумма, -Сумма);
		//КонецЕсли;
		//ДвижениеЗатраты.Кошелек = Кошелек;
		//ДвижениеЗатраты.ТипОперации = ТипОперации;
		//ДвижениеЗатраты.Валюта = Валюта;
		//ДвижениеЗатраты.Метка = Метка;
		//
		//Если СуммаЗатраты <> Неопределено Тогда 
		//	ДвижениеЗатраты.Сумма = СуммаЗатраты;
		//КонецЕсли;
		
		ВыполнитьДвиженияПоРегиструПартий(РежимПроведения);
	КонецЕсли;
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ОбъектКопирования);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыполнитьДвиженияПоРегиструПартий(Режим)
	
	ВалютаИсточник = Валюта;
	ВалютаПриемник = КошелекПриемник.Валюта;
	
	ВалютаУчета = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ВалютаУчета");
	
	Если Не ЗначениеЗаполнено(ВалютаУчета) Тогда 
		Возврат;
	КонецЕсли;
	
	Если (ТипОперации = Перечисления.ТипыОпераций.Перевод И (ВалютаИсточник <> ВалютаУчета Или ВалютаПриемник <> ВалютаУчета))
		Или ((ТипОперации = Перечисления.ТипыОпераций.Расход) И ВалютаИсточник <> ВалютаУчета) Тогда
		
		Если Режим = РежимПроведенияДокумента.Оперативный Тогда 
			Момент = Неопределено;
			Движения.КошелькиПартии.Записать();
		Иначе
			Момент = МоментВремени();
		КонецЕсли;
		
		Если ТипОперации = Перечисления.ТипыОпераций.Перевод И ВалютаИсточник = ВалютаУчета Тогда //приход партии			
			Движение = Движения.КошелькиПартии.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Дата;
			Движение.Кошелек = КошелекПриемник;
			Движение.Сумма = СуммаПриемник;
			Движение.Валюта = ВалютаПриемник;			
			Движение.Партия = Ссылка;
			Движение.Курс = Курс;
			
			Движение = Движения.ПокупкиВалюты.Добавить();
			Движение.Период = Дата;
			Движение.Кошелек = КошелекПриемник;
			Движение.Сумма = СуммаПриемник;
			Движение.СуммаРуб = Сумма;
			Движение.Валюта = ВалютаПриемник;			
			Движение.Партия = Ссылка;					
			Движение.Курс = Курс;
		Иначе //расход
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	КошелькиПартииОстатки.Кошелек,
			|	КошелькиПартииОстатки.Партия,
			|	КошелькиПартииОстатки.СуммаОстаток,
			|	КошелькиПартииОстатки.Партия.Курс,
			|	КошелькиПартииОстатки.Партия.Дата КАК ПартияДата
			|ИЗ
			|	РегистрНакопления.КошелькиПартии.Остатки(
			|			&МоментВремени,
			|			Валюта = &Валюта
			|				И Кошелек = &Кошелек) КАК КошелькиПартииОстатки
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПартияДата");			
			Запрос.УстановитьПараметр("Кошелек", Кошелек);
			Запрос.УстановитьПараметр("Валюта", ВалютаИсточник);
			Запрос.УстановитьПараметр("МоментВремени", Момент);
			
			ОстаткиПартий = Запрос.Выполнить().Выгрузить();
			
			ОстаткиИтог = ОстаткиПартий.Итог("СуммаОстаток");
			
			Если ОстаткиИтог < Сумма Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1. Не хватает остатков по партиям. Остаток: %2 требуется: %3'"), Ссылка, ОстаткиИтог, Сумма));
			КонецЕсли;
			
			Списать = Мин(Сумма, ОстаткиИтог);
			
			Если Списать <> 0 Тогда 
				Для Каждого СтрокаОстатковПартий Из ОстаткиПартий Цикл					
					Распределить = Мин(СтрокаОстатковПартий.СуммаОстаток, Списать);
					
					Если Распределить = 0 Тогда 
						Прервать;
					КонецЕсли;
					
					Движение = Движения.КошелькиПартии.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
					Движение.Период = Дата;
					Движение.Кошелек = Кошелек;
					Движение.Сумма = Распределить;
					Движение.Валюта = ВалютаИсточник;			
					Движение.Партия = СтрокаОстатковПартий.Партия;										
					Движение.Курс = СтрокаОстатковПартий.ПартияКурс;
					
					Списать = Списать - Распределить;
					
					Если Списать = 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если Списать <> 0 Тогда 
				Для Каждого СтрокаОстатковПартий Из ОстаткиПартий Цикл
					ТекСтрокаРегистра = Движения.КошелькиПартии.Получить(ОстаткиПартий.Индекс(СтрокаОстатковПартий));
					
					Распределить = Мин(СтрокаОстатковПартий.СуммаОстаток - ТекСтрокаРегистра.Сумма, Списать);
					
					Если Распределить = 0 Тогда 
						Прервать;
					КонецЕсли;
					
					ТекСтрокаРегистра.Сумма = ТекСтрокаРегистра.Сумма + Распределить;
					
					Списать = Списать - Распределить;
					
					Если Списать = 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Списать = 0 Тогда 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось распределить остаток суммы на остатки по партиям. Остаток: %1 требуется: %2'"), Списать, Сумма));
				КонецЕсли;
			КонецЕсли;
			
			Если ТипОперации = Перечисления.ТипыОпераций.Перевод И ВалютаПриемник = ВалютаУчета Тогда //продажа валюты				
				Для Каждого СтрокаДвиженийКошелькиПартии Из Движения.КошелькиПартии Цикл
					Движение = Движения.ПродажиВалюты.Добавить();
					Движение.Период = Дата;
					Движение.Кошелек = СтрокаДвиженийКошелькиПартии.Кошелек;
					Движение.Сумма = СтрокаДвиженийКошелькиПартии.Сумма;
					Движение.СуммаРуб = СтрокаДвиженийКошелькиПартии.Сумма * Курс;
					Движение.Валюта = СтрокаДвиженийКошелькиПартии.Валюта;			
					Движение.Партия = СтрокаДвиженийКошелькиПартии.Партия;					
					Движение.Курс = Курс;
				КонецЦикла;
			ИначеЕсли ТипОперации = Перечисления.ТипыОпераций.Перевод И ВалютаПриемник = ВалютаИсточник Тогда //перемещение партии
				ТаблицаДвиженияКошелькиПартии = Движения.КошелькиПартии.Выгрузить();
				
				Для Каждого СтрокаДвиженийКошелькиПартии из ТаблицаДвиженияКошелькиПартии Цикл
					Движение = Движения.КошелькиПартии.Добавить();
					ЗаполнитьЗначенияСвойств(Движение, СтрокаДвиженийКошелькиПартии);
					Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
					Движение.Кошелек = КошелекПриемник;
				КонецЦикла;				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
