#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипОперации = Перечисления.ТипыОпераций.Долги Тогда 
		Если ТипДолга = Перечисления.ТипыДолгов.Зачисление Или ТипДолга = Перечисления.ТипыДолгов.Списание Тогда 
			Кошелек = Неопределено;
		КонецЕсли;
	Иначе
		ТипДолга = Перечисления.ТипыДолгов.ПустаяСсылка();
	КонецЕсли;
	
	Если ТипОперации <> Перечисления.ТипыОпераций.Долги И Не ОбщиеЗатраты Тогда 
		ФизЛицо = Неопределено;
	КонецЕсли;
	
	Если Не (ТипОперации = Перечисления.ТипыОпераций.Доход
		Или ТипОперации = Перечисления.ТипыОпераций.Расход
		Или ТипОперации = Перечисления.ТипыОпераций.Сторно) Тогда 
		ОбщиеЗатраты = 0;
	КонецЕсли;
		
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("ДокументСсылка.Операция") Тогда 
		ЗаполнитьНаОснованииОперации(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда 
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если ТипОперации = Перечисления.ТипыОпераций.Перевод Тогда 
		ПроверяемыеРеквизиты.Добавить("КошелекПриемник");
		ПроверяемыеРеквизиты.Добавить("СуммаПриемник");
		ПроверяемыеРеквизиты.Добавить("Кошелек");
	ИначеЕсли ТипОперации = Перечисления.ТипыОпераций.Долги Тогда
		ПроверяемыеРеквизиты.Добавить("Физлицо");
		ПроверяемыеРеквизиты.Добавить("ТипДолга");
		ПроверяемыеРеквизиты.Добавить("Сумма");
		
		Если ТипДолга = Перечисления.ТипыДолгов.Дебет Или ТипДолга = Перечисления.ТипыДолгов.Кредит Тогда 
			ПроверяемыеРеквизиты.Добавить("Кошелек");
		ИначеЕсли ТипДолга = Перечисления.ТипыДолгов.Взаимозачет Тогда 
			Если Метка = МеткаОтправитель Тогда 
				ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Для вида долга Взаимозачет необходимо указать различных метки'"), ЭтотОбъект, "Метка", , Отказ);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипОперации = Перечисления.ТипыОпераций.Сторно Тогда
		ПроверяемыеРеквизиты.Добавить("Основание");
	Иначе
		ПроверяемыеРеквизиты.Добавить("Статья");
		
		Если ОбщиеЗатраты Тогда 
			ПроверяемыеРеквизиты.Добавить("СуммаОбщиеЗатраты");
			ПроверяемыеРеквизиты.Добавить("Физлицо");
		Иначе
			ПроверяемыеРеквизиты.Добавить("Сумма");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.Операция.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ПроведениеСерверУТ.ОтразитьДолги(ДополнительныеСвойства, Движения, Отказ);
	ПроведениеСерверУТ.ОтразитьЗатраты(ДополнительныеСвойства, Движения, Отказ);
	ПроведениеСерверУТ.ОтразитьЗатратыОбщие(ДополнительныеСвойства, Движения, Отказ);
	ПроведениеСерверУТ.ОтразитьКошельки(ДополнительныеСвойства, Движения, Отказ);
	ПроведениеСерверУТ.ОтразитьКошелькиПартии(ДополнительныеСвойства, Движения, Отказ);
	ПроведениеСерверУТ.ОтразитьПокупкиВалюты(ДополнительныеСвойства, Движения, Отказ);
	ПроведениеСерверУТ.ОтразитьПродажиВалюты(ДополнительныеСвойства, Движения, Отказ);
	
	Движения.КошелькиПартии.Записывать = Истина;
	Движения.ПокупкиВалюты.Записывать = Истина;
	Движения.ПродажиВалюты.Записывать = Истина;
	
	Если ТипОперации = Перечисления.ТипыОпераций.Перевод Тогда
		ВыполнитьДвиженияПоРегиструПартий(РежимПроведения);
	ИначеЕсли ТипОперации = Перечисления.ТипыОпераций.Долги Тогда
	Иначе
		ВыполнитьДвиженияПоРегиструПартий(РежимПроведения);
	КонецЕсли;
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ОбъектКопирования);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьДокумент()
	
	Если ТипОперации = Перечисления.ТипыОпераций.Сторно И
		Основание.ТипОперации = Перечисления.ТипыОпераций.Сторно Тогда 
		
		ВызватьИсключение НСтр("ru = 'Невозможно сторнировать операцию с типом Сторно'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Дата) Тогда 
		Дата = ТекущаяДата();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТипОперации) Тогда 
		ТипОперации = Перечисления.ТипыОпераций.Расход;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Кошелек) И Не ТипДолга = Перечисления.ТипыДолгов.Списание Тогда 
		Кошелек = Константы.ОсновнойКошелек.Получить();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Кошелек) Тогда 
		Валюта = Кошелек.Валюта;
	КонецЕсли;
	
	КурсПрямой = Ложь;
	
КонецПроцедуры

Процедура ЗаполнитьНаОснованииОперации(ДокументОснование)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Операция.Ссылка КАК Основание,
	|	Операция.Кошелек КАК Кошелек,
	|	Операция.Статья КАК Статья,
	|	Операция.Сумма КАК Сумма,
	|	Операция.Комментарий КАК Комментарий,
	|	Операция.ФизЛицо КАК ФизЛицо,
	|	Операция.Метка КАК Метка,
	|	Операция.ОбщиеЗатраты КАК ОбщиеЗатраты,
	|	Операция.СуммаОбщиеЗатраты КАК СуммаОбщиеЗатраты,
	|	Операция.СуммаДолг КАК СуммаДолг,
	|	Операция.Валюта КАК Валюта,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОпераций.Сторно) КАК ТипОперации
	|ИЗ
	|	Документ.Операция КАК Операция
	|ГДЕ
	|	Операция.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
КонецПроцедуры

Процедура ВыполнитьДвиженияПоРегиструПартий(Режим)
	
	ВалютаИсточник = Валюта;
	ВалютаПриемник = КошелекПриемник.Валюта;
	
	ВалютаУчета = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ВалютаУчета");
	
	Если Не ЗначениеЗаполнено(ВалютаУчета) Тогда 
		Возврат;
	КонецЕсли;
	
	Если (ТипОперации = Перечисления.ТипыОпераций.Перевод И (ВалютаИсточник <> ВалютаУчета Или ВалютаПриемник <> ВалютаУчета))
		Или ((ТипОперации = Перечисления.ТипыОпераций.Расход) И ВалютаИсточник <> ВалютаУчета) Тогда
		
		Если Режим = РежимПроведенияДокумента.Оперативный Тогда 
			Момент = Неопределено;
			Движения.КошелькиПартии.Записать();
		Иначе
			Момент = МоментВремени();
		КонецЕсли;
		
		Если ТипОперации = Перечисления.ТипыОпераций.Перевод И ВалютаИсточник = ВалютаУчета Тогда //приход партии			
			Движение = Движения.КошелькиПартии.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Дата;
			Движение.Кошелек = КошелекПриемник;
			Движение.Сумма = СуммаПриемник;
			Движение.Валюта = ВалютаПриемник;			
			Движение.Партия = Ссылка;
			Движение.Курс = Курс;
			
			Движение = Движения.ПокупкиВалюты.Добавить();
			Движение.Период = Дата;
			Движение.Кошелек = КошелекПриемник;
			Движение.Сумма = СуммаПриемник;
			Движение.СуммаРуб = Сумма;
			Движение.Валюта = ВалютаПриемник;			
			Движение.Партия = Ссылка;					
			Движение.Курс = Курс;
		Иначе //расход
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	КошелькиПартииОстатки.Кошелек,
			|	КошелькиПартииОстатки.Партия,
			|	КошелькиПартииОстатки.СуммаОстаток,
			|	КошелькиПартииОстатки.Партия.Курс,
			|	КошелькиПартииОстатки.Партия.Дата КАК ПартияДата
			|ИЗ
			|	РегистрНакопления.КошелькиПартии.Остатки(
			|			&МоментВремени,
			|			Валюта = &Валюта
			|				И Кошелек = &Кошелек) КАК КошелькиПартииОстатки
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПартияДата");			
			Запрос.УстановитьПараметр("Кошелек", Кошелек);
			Запрос.УстановитьПараметр("Валюта", ВалютаИсточник);
			Запрос.УстановитьПараметр("МоментВремени", Момент);
			
			ОстаткиПартий = Запрос.Выполнить().Выгрузить();
			
			ОстаткиИтог = ОстаткиПартий.Итог("СуммаОстаток");
			
			Если ОстаткиИтог < Сумма Тогда
				ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1. Не хватает остатков по партиям. Остаток: %2 требуется: %3'"), Ссылка, ОстаткиИтог, Сумма));
			КонецЕсли;
			
			Списать = Мин(Сумма, ОстаткиИтог);
			
			Если Списать <> 0 Тогда 
				Для Каждого СтрокаОстатковПартий Из ОстаткиПартий Цикл					
					Распределить = Мин(СтрокаОстатковПартий.СуммаОстаток, Списать);
					
					Если Распределить = 0 Тогда 
						Прервать;
					КонецЕсли;
					
					Движение = Движения.КошелькиПартии.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
					Движение.Период = Дата;
					Движение.Кошелек = Кошелек;
					Движение.Сумма = Распределить;
					Движение.Валюта = ВалютаИсточник;			
					Движение.Партия = СтрокаОстатковПартий.Партия;										
					Движение.Курс = СтрокаОстатковПартий.ПартияКурс;
					
					Списать = Списать - Распределить;
					
					Если Списать = 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если Списать <> 0 Тогда 
				Для Каждого СтрокаОстатковПартий Из ОстаткиПартий Цикл
					ТекСтрокаРегистра = Движения.КошелькиПартии.Получить(ОстаткиПартий.Индекс(СтрокаОстатковПартий));
					
					Распределить = Мин(СтрокаОстатковПартий.СуммаОстаток - ТекСтрокаРегистра.Сумма, Списать);
					
					Если Распределить = 0 Тогда 
						Прервать;
					КонецЕсли;
					
					ТекСтрокаРегистра.Сумма = ТекСтрокаРегистра.Сумма + Распределить;
					
					Списать = Списать - Распределить;
					
					Если Списать = 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Списать = 0 Тогда 
					ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось распределить остаток суммы на остатки по партиям. Остаток: %1 требуется: %2'"), Списать, Сумма));
				КонецЕсли;
			КонецЕсли;
			
			Если ТипОперации = Перечисления.ТипыОпераций.Перевод И ВалютаПриемник = ВалютаУчета Тогда //продажа валюты
				Для Каждого СтрокаДвиженийКошелькиПартии Из Движения.КошелькиПартии Цикл
					Движение = Движения.ПродажиВалюты.Добавить();
					Движение.Период = Дата;
					Движение.Кошелек = СтрокаДвиженийКошелькиПартии.Кошелек;
					Движение.Сумма = СтрокаДвиженийКошелькиПартии.Сумма;
					Движение.СуммаРуб = СтрокаДвиженийКошелькиПартии.Сумма * Курс;
					Движение.Валюта = СтрокаДвиженийКошелькиПартии.Валюта;
					Движение.Партия = СтрокаДвиженийКошелькиПартии.Партия;
					Движение.Курс = Курс;
				КонецЦикла;
			ИначеЕсли ТипОперации = Перечисления.ТипыОпераций.Перевод И ВалютаПриемник = ВалютаИсточник Тогда //перемещение партии
				ТаблицаДвиженияКошелькиПартии = Движения.КошелькиПартии.Выгрузить();
				
				Для Каждого СтрокаДвиженийКошелькиПартии Из ТаблицаДвиженияКошелькиПартии Цикл
					Движение = Движения.КошелькиПартии.Добавить();
					ЗаполнитьЗначенияСвойств(Движение, СтрокаДвиженийКошелькиПартии);
					Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
					Движение.Кошелек = КошелекПриемник;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли