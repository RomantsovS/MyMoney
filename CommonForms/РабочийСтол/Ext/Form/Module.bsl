#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ПростойСписок;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОсновнойКошелек = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ОсновнойКошелек");
	
	УстановитьУсловноеОформление();
	
	#Если Не МобильноеПриложениеСервер  тогда
		Элементы.ОстаткиСумма.Ширина = 10;
	#КонецЕсли
	
	ОткрыватьЧтоНового = ПараметрыСеанса.ОткрыватьЧтоНового;
	ОбновлениеБД = ПараметрыСеанса.ОбновлениеБД;
	
	ТекущаяОперация = ?(Не ПараметрыСеанса.ПарольПроверен, "ПроверитьПароль", "");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ПростойСписок = Неопределено Тогда 
		ПростойСписок = Истина;
	КонецЕсли;
	
	УстановитьВидимость();
	
	
	ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьПродолжитьОчередьПроцедурПослеОткрытия", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьОстатки" Тогда 
		ЗаполнитьОстатки();
	//ИначеЕсли ИмяСобытия = "ВопросВыгрузкиЕмейлБекапаПриНачалеРаботыСистемыЗавершение" и Параметр = Истина Тогда 
	//	БекапЧерезПочтуКлиент.ВыгрузитьБекапНаПочту(ЭтотОбъект);
	ИначеЕсли ИмяСобытия = "ЗагруженБекап" Тогда 
		ОбновитьБД();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОстаткиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.Остатки.ТекущиеДанные.СтрокаИтог Тогда 
		Возврат;
	КонецЕсли;
	
	Парам = Новый Структура("ОтборПоКошельку", Элементы.Остатки.ТекущиеДанные.Кошелек);
	ОткрытьФорму("Документ.Операция.ФормаСписка", Парам, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УправлениеДолгами(Команда)
	ОткрытьФорму("ОбщаяФорма.УправлениеДолгами", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПолныйСписок(Команда)
	
	ПростойСписок = Не ПростойСписок;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойСписок(Команда)
	
	ПростойСписок = Не ПростойСписок;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОперациюПоКошельку(Команда)
	Парам = Новый Структура("Кошелек", Элементы.Остатки.ТекущиеДанные.Кошелек);
	
	ОткрытьФорму("Документ.Операция.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", Парам));
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьВидимость()
	
	Элементы.ОбработкаОбменыОткрыть.Видимость = Не ПростойСписок;
	Элементы.ОбработкаНастройкиОткрыть.Видимость = Не ПростойСписок;
	Элементы.ОбработкаСервисОткрыть.Видимость = Не ПростойСписок;
	Элементы.ПолныйСписок.Видимость = ПростойСписок;
	Элементы.ПростойСписок.Видимость = Не ПростойСписок;
	Элементы.СправочникСтатьиОткрытьСписок.Видимость = Не ПростойСписок;
	Элементы.СправочникВалютыОткрытьСписок.Видимость = Не ПростойСписок;
	Элементы.СправочникМеткиОткрытьСписок.Видимость = Не ПростойСписок;
	Элементы.СправочникШаблоныЧтенияСМСОткрытьСписок.Видимость = Не ПростойСписок;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗапуститьПродолжитьОчередьПроцедурПослеОткрытия()
	Если ТекущаяОперация = "ПроверитьПароль" Тогда
		ОписаниеПослеПроверкиПароля = Новый ОписаниеОповещения("ПослеПроверкиПароля", ЭтотОбъект);
		
		// Проверка пароля
		ПарольДляВхода = ОбщегоНазначенияВызовСервера.ПарольДляВхода();
		Если ЗначениеЗаполнено(ПарольДляВхода) Тогда
			ОткрытьФорму("ОбщаяФорма.ФормаПроверкиПароля", Новый Структура("ПравильныйПароль", ПарольДляВхода),,,,,
			ОписаниеПослеПроверкиПароля, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеПослеПроверкиПароля, Истина);
		КонецЕсли;
	ИначеЕсли ОбновлениеБД Тогда
		ОбновитьБД();		
	ИначеЕсли ОткрыватьЧтоНового Тогда		
		ОткрытьЧтоНового();	
	ИначеЕсли ТекущаяОперация = "ВывестиСообщениеУстановкиПароля" Тогда 		
		ОбщегоНазначенияКлиент.ПриНачалеРаботыСистемыВывестиСообщениеУстановкиПароля(Новый ОписаниеОповещения("ПослеСообщенияУстановкиПароля",
		ЭтотОбъект));
	ИначеЕсли ТекущаяОперация = "ЗагрузкаКурсовВалют" Тогда		
		ОбщегоНазначенияКлиент.ПриНачалеРаботыСистемыЗагрузитьКурсыВалют(Новый ОписаниеОповещения("ПослеЗагрузкиКурсовВалют", ЭтотОбъект), ИдентификаторЗадания);
	Иначе
		ЗаполнитьОстатки();
		
		Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда 
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка 
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперации.ВывестиСообщенияЗадания(ИдентификаторЗадания, УникальныйИдентификатор);
			
			ИдентификаторЗадания = "";
			ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 
			ПараметрыОбработчикаОжидания.ТекущийИнтервал,  Истина);
		КонецЕсли;                                                          			
	Исключение
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ПредставлениеОшибки;
	КонецПопытки;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиПароля(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Истина Тогда
		ЗавершитьРаботуСистемы();
		
		Возврат;
	КонецЕсли;
	
	ТекущаяОперация = "ВывестиСообщениеУстановкиПароля";
	
	ОбщегоНазначенияВызовСервера.УстановитьЗначениеПараметраСеанса("ПарольПроверен", Истина);
	
	ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьПродолжитьОчередьПроцедурПослеОткрытия", 0.1, Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьБД()
	
	ОписаниеОбновлениеБД = Новый ОписаниеОповещения("ПослеОбновленияБД", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ОбновлениеБД",, ЭтаФорма,,,,ОписаниеОбновлениеБД);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЧтоНового()
	
	ОписаниеЧтоНового = Новый ОписаниеОповещения("ПослеЧтоНового", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ЧтоНового",, ЭтаФорма,,,,ОписаниеЧтоНового);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЧтоНового(Результат, ДополнительныеПараметры) Экспорт
	
	ПослеЧтоНовогоСервер();
	
	ОткрыватьЧтоНового = Ложь;
	
	ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьПродолжитьОчередьПроцедурПослеОткрытия", 0.1, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПослеЧтоНовогоСервер()
	
	ПараметрыСеанса.ОткрыватьЧтоНового = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОбновленияБД(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновлениеБД = Ложь;
	
	Если Результат Тогда
		
		ОткрыватьЧтоНового = Истина;
		
		ЗаполнитьОстатки();
	Иначе
		ОткрыватьЧтоНового = Ложь;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьПродолжитьОчередьПроцедурПослеОткрытия", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСообщенияУстановкиПароля(Результат, ДопПараметры) Экспорт 
	
	ТекущаяОперация = "ЗагрузкаКурсовВалют";
	ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьПродолжитьОчередьПроцедурПослеОткрытия", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеБекапаНаПочту(Результат, ДопПараметры) Экспорт 
	ТекущаяОперация = "ЗагрузкаКурсовВалют";
	ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьПродолжитьОчередьПроцедурПослеОткрытия", 0.1, Истина);	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции
	
&НаКлиенте
Процедура ПослеЗагрузкиКурсовВалют(Результат, ДопПараметры) Экспорт 
	ТекущаяОперация = "";
	ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьПродолжитьОчередьПроцедурПослеОткрытия", 0.1, Истина);	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстатки()
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	КошелькиОстатки.Кошелек КАК Кошелек,
	|	КошелькиОстатки.СуммаОстаток КАК Сумма,
	|	КошелькиОстатки.Валюта.КраткоеНаименование КАК ВалютаКраткоеНаименование,
	|	КошелькиОстатки.Кошелек.Код КАК КошелекКод,
	|	ВЫБОР
	|		КОГДА ОсновнойКошелек.Значение ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Порядок
	|ИЗ
	|	РегистрНакопления.Кошельки.Остатки КАК КошелькиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ОсновнойКошелек КАК ОсновнойКошелек
	|		ПО КошелькиОстатки.Кошелек = ОсновнойКошелек.Значение
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	ВалютаКраткоеНаименование,
	|	КошелекКод
	|ИТОГИ
	|	СУММА(Сумма),
	|	МИНИМУМ(Порядок)
	|ПО
	|	ВалютаКраткоеНаименование");
	Рез = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Остатки.Очистить();
	
	Пока Рез.Следующий() Цикл
		НовСтр = Остатки.Добавить();
		НовСтр.ВалютаКраткоеНаименование = Рез.ВалютаКраткоеНаименование;
		НовСтр.Сумма = Рез.сумма;
		НовСтр.КошелекКод = "Итого:";
		НовСтр.СтрокаИтог = Истина;
		
		РезКош = Рез.Выбрать();
		
		Пока РезКош.Следующий() Цикл
			НовСтр = Остатки.Добавить();
			НовСтр.ВалютаКраткоеНаименование = РезКош.ВалютаКраткоеНаименование;
			НовСтр.Сумма = РезКош.Сумма;
			НовСтр.КошелекКод = РезКош.КошелекКод;			
			НовСтр.Кошелек = РезКош.Кошелек;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	НовЭлем = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = НовЭлем.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Остатки.Имя);
	
	ОтборЭлемента = НовЭлем.Отбор.Элементы.Добавить(тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Остатки.СтрокаИтог");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	НовЭлем.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, , Истина));
	НовЭлем.Использование = Истина;
КонецПроцедуры

#КонецОбласти