#Область ПрограммныйИнтерфейс

#Область ПодготовкаИЗаписьДвиженийДокумента

// Процедура инициализирует общие структуры, используемые при проведении документов.
//  Вызывается из модуля документов при проведении.
//
// Параметры:
//  ДокументСсылка			 - ДокументСсылка - ссылка на документ
//  ДополнительныеСвойства	 - Структура - дополнительные свойства документа-объекта
//  РежимПроведения			 - РежимПроведенияДокумента - режим проведения
//
Процедура ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, ДополнительныеСвойства, РежимПроведения = Неопределено) Экспорт

	// В структуре "ДополнительныеСвойства" создаются свойства с ключами "ТаблицыДляДвижений", "ДляПроведения".

	// "ТаблицыДляДвижений" - структура, которая будет содержать таблицы значений с данными для выполнения движений.
	ДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура);

	// "ДляПроведения" - структура, содержащая свойства и реквизиты документа, необходимые для проведения.
	ДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
	
	// Структура, содержащая ключ с именем "МенеджерВременныхТаблиц", в значении которого хранится менеджер временных таблиц.
	// Содержит для каждой временной таблицы ключ (имя временной таблицы) и значение (признак наличия записей во временной таблице).
	ДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы", Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц));
	ДополнительныеСвойства.ДляПроведения.Вставить("РежимПроведения",           РежимПроведения);
	ДополнительныеСвойства.ДляПроведения.Вставить("МетаданныеДокумента",       ДокументСсылка.Метаданные());
	ДополнительныеСвойства.ДляПроведения.Вставить("Ссылка",                    ДокументСсылка);
	
КонецПроцедуры

// Формирует массив имен регистров, по которым документ имеет движения.
//  Вызывается при подготовке записей к регистрации движений.
//
// Параметры:
//  Регистратор					 - ДокументСсылка	 - ссылка на документ, для которого формируется список регистров
//  Движения					 - КоллекцияДвижений - движения документа
//  МассивИсключаемыхРегистров	 - Массив			 - исключаемые регистры
// 
// Возвращаемое значение:
//  Массив - массив имен регистров, по которым документ имеет движения.
//
Функция ПолучитьИспользуемыеРегистры(Регистратор, Движения, МассивИсключаемыхРегистров = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);

	Результат = Новый Массив;
	МаксимумТаблицВЗапросе = 256;

	СчетчикТаблиц   = 0;
	СчетчикДвижений = 0;

	ВсегоДвижений = Движения.Количество();
	ТекстЗапроса  = "";
	Для Каждого Движение Из Движения Цикл

		СчетчикДвижений = СчетчикДвижений + 1;

		ПропуститьРегистр = МассивИсключаемыхРегистров <> Неопределено
							И МассивИсключаемыхРегистров.Найти(Движение.Имя) <> Неопределено;

		Если Не ПропуститьРегистр Тогда

			Если СчетчикТаблиц > 0 Тогда

				ТекстЗапроса = ТекстЗапроса + "
				|ОБЪЕДИНИТЬ ВСЕ
				|";

			КонецЕсли;

			СчетчикТаблиц = СчетчикТаблиц + 1;

			ТекстЗапроса = ТекстЗапроса + 
			"
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|""" + Движение.Имя + """ КАК ИмяРегистра
			|
			|ИЗ " + Движение.ПолноеИмя() + "
			|
			|ГДЕ Регистратор = &Регистратор
			|";

		КонецЕсли;

		Если СчетчикТаблиц = МаксимумТаблицВЗапросе Или СчетчикДвижений = ВсегоДвижений Тогда

			Запрос.Текст  = ТекстЗапроса;
			ТекстЗапроса  = "";
			СчетчикТаблиц = 0;

			Если Результат.Количество() = 0 Тогда

				Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");

			Иначе

				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					Результат.Добавить(Выборка.ИмяРегистра);
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Процедура выполняет подготовку наборов записей документа к записи движений.
//  1. Очищает наборы записей от "старых записей" (ситуация возможна только в толстом клиенте)
//  2. Взводит флаг записи у наборов, по которым документ имеет движения
//  Вызывается из модуля документов при проведении.
//
// Параметры:
//  Объект	 - ДокументОбъект - наборы записей которого нудно подготовить
//  ЭтоНовый - Булево - признак нового документа
//  ДвиженияМетаданные - свойство метаданных Движения.
//  ОтключитьПроверкуДатыЗапретаИзменения - Булево
//
Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект, ЭтоНовый = Ложь, ДвиженияМетаданные = НеОпределено, ОтключитьПроверкуДатыЗапретаИзменения = Ложь) Экспорт
	Перем ЭтоНовыйДокумент, МетаданныеДвижения;
	
	Для Каждого НаборЗаписей Из Объект.Движения Цикл

		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
		КонецЕсли;

	КонецЦикла;
	
	Если НЕ Объект.ДополнительныеСвойства.Свойство("ЭтоНовый", ЭтоНовыйДокумент) Тогда
		ЭтоНовыйДокумент = ЭтоНовый;
	КонецЕсли;
	
	Если НЕ ЭтоНовыйДокумент Тогда

		// Регистры, движения по которым формируются не из модуля менеджера документа.
		ИсключаемыеРегистры = Новый Массив;
		
		ТипДокумента = ТипЗнч(Объект.Ссылка);
		
		// Регистры, движения по которым формируются не из модуля менеджера документа,
		// но должны удаляться при отмене проведения документа.
		Если Объект.ДополнительныеСвойства.Свойство("РежимЗаписи")
		 И НЕ Объект.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			
		КонецЕсли;
		
		Если Объект.ДополнительныеСвойства.Свойство("ДляПроведения")
		 И Объект.ДополнительныеСвойства.ДляПроведения.Свойство("МетаданныеДокумента") Тогда
			МетаданныеДвижения = Объект.ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Движения;
		Иначе
			МетаданныеДвижения = Объект.Метаданные().Движения;
		КонецЕсли;
		
		МассивИменРегистров = ПолучитьИспользуемыеРегистры(
			Объект.Ссылка,
			МетаданныеДвижения,
			ИсключаемыеРегистры);

		Для Каждого ИмяРегистра Из МассивИменРегистров Цикл
			Объект.Движения[ИмяРегистра].Записывать = Истина;
		КонецЦикла;

	КонецЕсли;
	
	//Если ОтключитьПроверкуДатыЗапретаИзменения Тогда
	//	ОтключитьПроверкуДатыЗапретаИзменения(Объект.Движения, ОтключитьПроверкуДатыЗапретаИзменения);
	//КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДополнительныеСвойстваНабораПоДокументу(ДокументОбъект, НаборЗаписей, ПартионныйУчетВключен = Неопределено) Экспорт
	
	Если ПартионныйУчетВключен = Неопределено Тогда
		ПартионныйУчетВключен = Истина;
	КонецЕсли;	
	
	НаборЗаписей.ДополнительныеСвойства.Вставить("ЭтоНовый", ДокументОбъект.ДополнительныеСвойства.ЭтоНовый);
	НаборЗаписей.ДополнительныеСвойства.Вставить("РежимЗаписи", ДокументОбъект.ДополнительныеСвойства.РежимЗаписи);
	НаборЗаписей.ДополнительныеСвойства.Вставить("ДатаРегистратора", ДокументОбъект.Дата);
	НаборЗаписей.ДополнительныеСвойства.Вставить("СтруктураОтраженияРеглПроводок", Новый Структура);
	
	НаборЗаписей.ДополнительныеСвойства.Вставить("ДляПроведения", 
		Новый Структура("СтруктураВременныеТаблицы, ПартионныйУчетВключен",
		// Структура для передачи данных в модули наборов записей.
		ДокументОбъект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы,
		ПартионныйУчетВключен));
	
	КонецПроцедуры
	
// Процедура записывает движения документа. Дополнительно происходит копирование параметров
//  в модули наборов записей для выполнения регистрации изменений в движениях.
//  Процедура вызывается из модуля документов при проведении.
//
// Параметры:
//  Объект	 - ДокументОбъект - объект, для которого нужно записать движения
//
Процедура ЗаписатьНаборыЗаписей(Объект) Экспорт
	Перем РегистрыДляКонтроля, РассчитыватьИзменения, ПараметрыКонтроля;
	
	// Заполним общие дополнительные свойства всех движений
	ПартионныйУчетВключен = Истина;
	
	Для Каждого Движение Из Объект.Движения Цикл
		
		ЗаполнитьДополнительныеСвойстваНабораПоДокументу(Объект, Движение, ПартионныйУчетВключен);
		
	КонецЦикла;
	
	// Регистры, для которых будут рассчитаны таблицы изменений движений.
	Если Объект.ДополнительныеСвойства.ДляПроведения.Свойство("РегистрыДляКонтроля", РегистрыДляКонтроля) Тогда
		
		// Установка флага регистрации изменений в наборе записей.
		Если НЕ Объект.ДополнительныеСвойства.Свойство("РассчитыватьИзменения", РассчитыватьИзменения) Тогда
			РассчитыватьИзменения = Истина;
		КонецЕсли;
		
		Для Каждого НаборЗаписей Из РегистрыДляКонтроля Цикл
			Если НаборЗаписей.Записывать Тогда
				
				НаборЗаписей.ДополнительныеСвойства.Вставить("РассчитыватьИзменения", РассчитыватьИзменения);
				
				// Необходимость контроля обеспечения устанавливается при выполнении рекомендаций в "Состояние обеспечения заказов".
				КонтролироватьОбеспечение = Неопределено;
				Если Объект.ДополнительныеСвойства.Свойство("КонтролироватьОбеспечение", КонтролироватьОбеспечение) Тогда
					НаборЗаписей.ДополнительныеСвойства.Вставить("КонтролироватьОбеспечение", КонтролироватьОбеспечение);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	
	Объект.Движения.Записать();
	
КонецПроцедуры

// Процедура компонует текст запроса, выполняет запрос и выгружает результаты запроса в таблицы.
//
// Параметры:
//  Запрос					 - Запрос	 - запрос, параметры которого предварительно установлены.
//  ТекстыЗапроса			 - СписокЗначений	 - в списке перечислены тексты запросов и их имена.
//  Таблицы					 - Структура		 - структура в которую будут помещены полученные таблицы для движений.
//  ДобавитьРазделитель		 - Булево			 - Истина, если нужно добавить разделитель ";" между запросами.
//  ДобавлятьСловоТаблица	 - Булево			 - Истина, если к имени таблицы движений нужно в начало добавить слово "Таблица".
//  ТолькоОтмеченные		 - Булево			 - признак пропуска инициализации таблицы движения.
//
Процедура ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, Таблицы, ДобавитьРазделитель = Ложь, ДобавлятьСловоТаблица = Истина, ТолькоОтмеченные = Ложь) Экспорт
	
	ТаблицыЗапроса = ОбщегоНазначенияУТ.ВыгрузитьРезультатыЗапроса(Запрос, ТекстыЗапроса,, ДобавитьРазделитель);
	
	// Помещение результатов запроса в таблицы
	Для Каждого ТекстЗапроса из ТекстыЗапроса Цикл

		ИмяТаблицы = ТекстЗапроса.Представление;

		Если Не ПустаяСтрока(ИмяТаблицы) И (Не ТолькоОтмеченные Или ТекстЗапроса.Пометка) Тогда

			Если ДобавлятьСловоТаблица Тогда
				// Таблицы для проведения должны начинаться с "Таблица"
				Если НЕ СтрНачинаетсяС(ИмяТаблицы, "Таблица") Тогда
					ИмяТаблицы = "Таблица" + ИмяТаблицы;
				КонецЕсли;
			КонецЕсли;
			
			Таблицы.Вставить(ИмяТаблицы, ТаблицыЗапроса[ТекстЗапроса.Представление]);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Определяет необходимость подготовить таблицу для формирования движений
//
// Параметры:
//  ИмяРегистра	- Строка - имя регистра. Например "ТоварыНаСкладах"
//  Регистры	- Строка, Структура, Неопределено - список регистров, разделенных запятой, Или структура, в ключах которой - имена регистров
//													Если неопределено - то всегда возвращается ИСТИНА
// 
// Возвращаемое значение:
//   - Булево - Истина, если требуется инициализировать указанную таблицу
//
Функция ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Экспорт

	Если ЗначениеЗаполнено(Регистры) Тогда
		
		Если ТипЗнч(Регистры) = Тип("Строка") Тогда
			МассивРегистров = Новый Структура(Регистры);
		Иначе
			МассивРегистров = Регистры;
		КонецЕсли;
		
		Если НЕ МассивРегистров.Свойство(ИмяРегистра) Тогда
			Возврат Ложь;
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат Истина;

КонецФункции

Процедура ОтразитьДолги(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДолги = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДолги;
	
	Если Отказ Или ТаблицаДолги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияДолги = Движения.Долги;
	ДвиженияДолги.Записывать = Истина;
	ДвиженияДолги.Загрузить(ТаблицаДолги);
	
КонецПроцедуры

Процедура ОтразитьЗатраты(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаЗатраты = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗатраты;
	
	Если Отказ Или ТаблицаЗатраты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗатраты = Движения.Затраты;
	ДвиженияЗатраты.Записывать = Истина;
	ДвиженияЗатраты.Загрузить(ТаблицаЗатраты);
	
КонецПроцедуры

Процедура ОтразитьЗатратыОбщие(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаЗатратыОбщие = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗатратыОбщие;
	
	Если Отказ Или ТаблицаЗатратыОбщие.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗатратыОбщие = Движения.ЗатратыОбщие;
	ДвиженияЗатратыОбщие.Записывать = Истина;
	ДвиженияЗатратыОбщие.Загрузить(ТаблицаЗатратыОбщие);
	
КонецПроцедуры

Процедура ОтразитьКошельки(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаКошельки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаКошельки;
	
	Если Отказ Или ТаблицаКошельки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияКошельки = Движения.Кошельки;
	ДвиженияКошельки.Записывать = Истина;
	ДвиженияКошельки.Загрузить(ТаблицаКошельки);
	
КонецПроцедуры

Процедура ОтразитьКошелькиПартии(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаКошелькиПартии = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаКошелькиПартии;
	
	Если Отказ Или ТаблицаКошелькиПартии.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияКошелькиПартии = Движения.КошелькиПартии;
	ДвиженияКошелькиПартии.Записывать = Истина;
	ДвиженияКошелькиПартии.Загрузить(ТаблицаКошелькиПартии);
	
КонецПроцедуры

Процедура ОтразитьПокупкиВалюты(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаПокупкиВалюты = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПокупкиВалюты;
	
	Если Отказ Или ТаблицаПокупкиВалюты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПокупкиВалюты = Движения.ПокупкиВалюты;
	ДвиженияПокупкиВалюты.Записывать = Истина;
	ДвиженияПокупкиВалюты.Загрузить(ТаблицаПокупкиВалюты);
	
КонецПроцедуры

Процедура ОтразитьПродажиВалюты(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаПродажиВалюты = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажиВалюты;
	
	Если Отказ Или ТаблицаПродажиВалюты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПродажиВалюты = Движения.ПродажиВалюты;
	ДвиженияПродажиВалюты.Записывать = Истина;
	ДвиженияПродажиВалюты.Загрузить(ТаблицаПродажиВалюты);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти