#Область ПрограммныйИнтерфейс

Процедура ВыгрузитьРезервнуюКопиюНаПочту(Знач ПараметрыВыгрузки, АдресХранилища = Неопределено) Экспорт
	
	ИмяФайла = ВыгрузитьРезервнуюКопиюВФайл();
	
	Если ИмяФайла = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПочтовыйПрофиль = РаботаСПочтойКлиентСервер.ПолучитьПрофиль();
	
	Если ПочтовыйПрофиль = Неопределено Тогда 
		Константы.ДатаПоследнегоРезервногоКопирования.Установить(ТекущаяДата());
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Выгрузка резервной копии в файл выполнена успешно. Адрес e-mail не указан'"));
		Возврат;
	КонецЕсли;
	
	ПочтовоеСообщение = Новый ИнтернетПочтовоеСообщение;
	ПочтовоеСообщение.Тема = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'MyMoney Backup %1 %2'"),
	ЗначениеНаСтроекПовтИсп.ПолучитьЗначениеКонстанты("ТекущаяВерсияПриложения"), Формат(ТекущаяДата(), "ДЛФ=DDT"));
	ПочтовоеСообщение.Отправитель = Константы.АдресПочтыРезервногоКопирования.Получить();
	ПочтовоеСообщение.Получатели.Добавить(Константы.АдресПочтыРезервногоКопирования.Получить());
	
	Почта = Новый ИнтернетПочта;
	
	Почта.Подключиться(ПочтовыйПрофиль);
	
	ПочтовоеСообщение.Вложения.Добавить(ИмяФайла, "РезервнаяКопия");
	
	ОбщегоНазначения.СообщитьПользователю(НСтр("ru = '{СтандартныеПодсистемы.ДлительныеОперации}отправка на почту'"));
	
	Почта.Послать(ПочтовоеСообщение);
	
	Константы.ДатаПоследнегоРезервногоКопирования.Установить(ТекущаяДата());
	
	ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Выгрузка резервной копии на почту выполнена успешно'"));
	
КонецПроцедуры

Функция ПроверитьНеобходимостьВыгрузкиРезервнойКопииНаПочту(ТекстОтносительнойДатыРезервнойКопии = Неопределено) Экспорт 
	
	Если Не ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИспользоватьРезервноеКопированиеНаПочту") Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ПериодичностьРезервногоКопирования = Константы.ПериодичностьРезервногоКопирования.Получить();
	
	Если ПериодичностьРезервногоКопирования = 0 Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ДатаПоследнегоРезервногоКопирования = Константы.ДатаПоследнегоРезервногоКопирования.Получить();
	
	Если (ТекущаяДата() - Константы.ДатаПоследнегоРезервногоКопирования.Получить()) / 3600 < ПериодичностьРезервногоКопирования Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если ТекстОтносительнойДатыРезервнойКопии <> Неопределено Тогда 
		ТекстОтносительнойДатыРезервнойКопии = ОбщегоНазначенияКлиентСервер.ОтносительнаяДатаСинхронизации(ДатаПоследнегоРезервногоКопирования);
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция ВыгрузитьРезервнуюКопиюВФайл() Экспорт 
	//попытка
	#Если МобильноеПриложениеСервер Тогда
		Разделитель = "/";
	#Иначе
		Разделитель = "\";    
	#КонецЕсли
	
	Каталог = ЗначениеНаСтроекПовтИсп.ПолучитьЗначениеКонстанты("КаталогХраненияФайлов");
	
	Если Не ЗначениеЗаполнено(Каталог) Тогда
		ВызватьИсключение НСтр("ru = 'Не указан каталог хранения файлов'");
	КонецЕсли;
	
	// Сформировать имя временного файла.
	ИмяФайла = Каталог + ?(Прав(Каталог, 1) = Разделитель, "", Разделитель) + "BackUp " +
	ЗначениеНаСтроекПовтИсп.ПолучитьЗначениеКонстанты("ТекущаяВерсияПриложения") + " " + Формат(ТекущаяДата(), "ДФ='гггг-ММ-дд ЧЧ-мм-сс'") +
	".xml"; 
	
	МойXML = Новый ЗаписьXML; 
	ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Ложь); 
	МойXML.ОткрытьФайл(ИмяФайла, ПараметрыЗаписиXML); 
	МойXML.ЗаписатьОбъявлениеXML();
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Объект");
	
	ОбщегоНазначения.СообщитьПользователю(НСтр("ru = '{СтандартныеПодсистемы.ДлительныеОперации}выгружаются справочники: %1'"));
	
	МассивКонстант = Новый Массив;
	МассивКонстант.Добавить(Метаданные.Константы.АдресПочтыРезервногоКопирования);
	МассивКонстант.Добавить(Метаданные.Константы.ВалютаУчета);
	МассивКонстант.Добавить(Метаданные.Константы.ИспользоватьРезервноеКопированиеНаПочту);
	МассивКонстант.Добавить(Метаданные.Константы.ИспользоватьЧтениеСМСДляСозданияОпераций);
	МассивКонстант.Добавить(Метаданные.Константы.ОсновнойКошелек);
	МассивКонстант.Добавить(Метаданные.Константы.ОткрыватьЗагрузкуКурсовПриНачалеРаботы);
	МассивКонстант.Добавить(Метаданные.Константы.ПериодичностьРезервногоКопирования);
	МассивКонстант.Добавить(Метаданные.Константы.РазмерШрифта);
	МассивКонстант.Добавить(Метаданные.Константы.ЧасовойПоясUTC);
	
	Для Каждого КонстантаМета Из МассивКонстант Цикл 
		КонстантаМенеджер = Константы[КонстантаМета.Имя].СоздатьМенеджерЗначения();
		КонстантаМенеджер.Прочитать();
		
		ТЗ.Добавить().Объект = КонстантаМенеджер;
	КонецЦикла;
	
	Выборка = Справочники.Валюты.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТЗ.Добавить().Объект = Выборка.ПолучитьОбъект();
	КонецЦикла;
	
	Выборка = Справочники.Статьи.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТЗ.Добавить().Объект = Выборка.ПолучитьОбъект();
	КонецЦикла;
	
	Выборка = Справочники.Кошельки.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТЗ.Добавить().Объект = Выборка.ПолучитьОбъект();
	КонецЦикла;
	
	Выборка = Справочники.Метки.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТЗ.Добавить().Объект = Выборка.ПолучитьОбъект();
	КонецЦикла;
	
	Выборка = Справочники.ФизЛица.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТЗ.Добавить().Объект = Выборка.ПолучитьОбъект();
	КонецЦикла;
	
	Выборка = Справочники.ШаблоныЧтенияСМС.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТЗ.Добавить().Объект = Выборка.ПолучитьОбъект();
	КонецЦикла;
	
	Выборка = Документы.ВводОстатков.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТЗ.Добавить().Объект = Выборка.ПолучитьОбъект();
	КонецЦикла;
	
	Выгружено = 0;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Операция.Ссылка
	|ИЗ
	|	Документ.Операция КАК Операция
	|
	|УПОРЯДОЧИТЬ ПО
	|	Операция.Дата");
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоОпераций = Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл
		ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '{СтандартныеПодсистемы.ДлительныеОперации}Выгружено операций: %1 / %2'"), Выгружено, КоличествоОпераций));
		
		ТЗ.Добавить().Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Выгружено = Выгружено + 1;
	КонецЦикла;
	
	СериализаторXDTO.ЗаписатьXML(МойXML, ТЗ);
	
	МойXML.Закрыть();
	
	Возврат ИмяФайла;
	
КонецФункции

Функция ЗагрузитьРезервнуюКопиюПочтыНаСервере(Знач ПараметрыВыгрузки, АдресХранилища = Неопределено) Экспорт 
	ЧтениеXML = Новый ЧтениеXML; 
	ЧтениеXML.ОткрытьФайл(ПараметрыВыгрузки.ИмяФайла);
	
	ЗагруженоОбъектов = 0;
	
	ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = '{СтандартныеПодсистемы.ДлительныеОперации}загружено объектов: %1'"), ЗагруженоОбъектов));
	
	Менеджеры = ИнициализацияМенеджеров();
	
	Попытка
		Если Не ПараметрыВыгрузки.Свойство("РучнаяЗагрузкаXML") Тогда 
			Результат = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
			
			Для Каждого Стр из Результат Цикл
				Стр.Объект.ОбменДанными.Загрузка = Истина;
				
				Стр.Объект.Записать();
				
				Стр.Объект.ОбменДанными.Загрузка = Ложь;
				
				Если Метаданные.Документы.Найти(Стр.Объект.Метаданные()) <> Неопределено Тогда
					Стр.Объект.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;
			КонецЦикла;
		Иначе
			НовОбъект = Неопределено;
			
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Value" Тогда 
					ЗагруженоОбъектов = ЗагруженоОбъектов + 1;
					
					ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '{СтандартныеПодсистемы.ДлительныеОперации}загружено Объектов: %1
					|Последний загруженный объект: %2'"), ЗагруженоОбъектов, НовОбъект));
					
					СтруктураОбъекта = Новый Структура;
					Атрибут = ЧтениеXML.ЗначениеАтрибута(1);
					
					Если Сред(Атрибут, 6, 8) = "Constant" Тогда 
						СтруктураОбъекта.Вставить("ИмяТипаМетаданных", "Константы");
						СтруктураОбъекта.Вставить("ИмяМетаданных", Сред(Атрибут, 27));
					ИначеЕсли Сред(Атрибут, 6, 7) = "Catalog" Тогда 
						СтруктураОбъекта.Вставить("ИмяТипаМетаданных", "Справочники");
						СтруктураОбъекта.Вставить("ИмяМетаданных", Сред(Атрибут, 20));
					ИначеЕсли Сред(Атрибут, 6, 8) = "Document" Тогда 
						СтруктураОбъекта.Вставить("ИмяТипаМетаданных", "Документы");
						СтруктураОбъекта.Вставить("ИмяМетаданных", Сред(Атрибут, 21));
					КонецЕсли;
					
					Пока Не (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "Value") Цикл
						ЧтениеXML.Прочитать();
						
						Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "d3p1:Ref" Тогда 
							ЧтениеXML.Прочитать();
							
							СтруктураОбъекта.Вставить("Уин", ЧтениеXML.Значение);
						ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда 
							ИмяЭлемента = Сред(ЧтениеXML.Имя, 6);
							
							ЧтениеXML.Прочитать();
							
							СтруктураОбъекта.Вставить(ИмяЭлемента, ЧтениеXML.Значение);
						КонецЕсли;
					КонецЦикла;
					
					Если СтруктураОбъекта.ИмяТипаМетаданных = "Константы" Тогда 
						ИмяМетаданных = СтруктураОбъекта.ИмяМетаданных; //переименованы константы
						Если СтруктураОбъекта.ИмяМетаданных = "АдресПочтыБекапа" Тогда 
							ИмяМетаданных = "АдресПочтыРезервногоКопирования";
						ИначеЕсли СтруктураОбъекта.ИмяМетаданных = "ИспользоватьБекапНаПочту" Тогда 
							ИмяМетаданных = "ИспользоватьРезервноеКопированиеНаПочту";
						ИначеЕсли СтруктураОбъекта.ИмяМетаданных = "ПериодичностьБекапа" Тогда 
							ИмяМетаданных = "ПериодичностьРезервногоКопирования";
						КонецЕсли;
						
						КонстантаМенеджер = Константы[ИмяМетаданных].СоздатьМенеджерЗначения();
						
						ПервыйТип = КонстантаМенеджер.Метаданные().Тип.Типы()[0];
						
						Если ОбщегоНазначения.ЭтоСсылка(ПервыйТип) Тогда 
							Если ЗначениеЗаполнено(СтруктураОбъекта.Value) Тогда 
								ЗначениеСсылка = Неопределено;
								
								ТекМенеджер = Менеджеры.Получить(ПервыйТип);
								
								Если ТекМенеджер.ИмяТипа = "Справочник" Тогда
									ЗначениеСсылка = ТекМенеджер.Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураОбъекта.Value));
								ИначеЕсли ТекМенеджер.ИмяТипа = "Перечисление" Тогда 
									ЗначениеСсылка = ТекМенеджер.Менеджер[СтруктураОбъекта.Value];
								КонецЕсли;
								
								КонстантаМенеджер.Значение = ЗначениеСсылка;
							КонецЕсли;
						Иначе
							КонстантаМенеджер.Значение = СтруктураОбъекта.Value;
						КонецЕсли;
						
						КонстантаМенеджер.ОбменДанными.Загрузка = Истина;
						
						КонстантаМенеджер.Записать();
					ИначеЕсли СтруктураОбъекта.ИмяТипаМетаданных = "Справочники" Тогда 
						НовСсылка = Справочники[СтруктураОбъекта.ИмяМетаданных].ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураОбъекта.Уин));
						
						НовОбъект = НовСсылка.ПолучитьОбъект();
						
						Если НовОбъект = Неопределено Тогда 
							Если СтруктураОбъекта.Свойство("isFolder") И СтруктураОбъекта.isFolder Тогда 
								НовОбъект = Справочники[СтруктураОбъекта.ИмяМетаданных].СоздатьГруппу();
							Иначе
								НовОбъект = Справочники[СтруктураОбъекта.ИмяМетаданных].СоздатьЭлемент();
							КонецЕсли;
							
							НовСсылка = Справочники[СтруктураОбъекта.ИмяМетаданных].ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураОбъекта.Уин));
							НовОбъект.УстановитьСсылкуНового(НовСсылка);
						КонецЕсли;
						
						ЗаполнитьЗначенияСвойств(НовОбъект, СтруктураОбъекта);
						
						Если СтруктураОбъекта.Свойство("Parent")  Тогда 							
							НовОбъект.Родитель = Справочники[СтруктураОбъекта.ИмяМетаданных].ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураОбъекта.Parent));
						КонецЕсли;
						
						Для Каждого МетаРеквизит Из НовОбъект.Метаданные().Реквизиты Цикл
							ПервыйТип = МетаРеквизит.Тип.Типы()[0];
							
							Если ОбщегоНазначения.ЭтоСсылка(ПервыйТип) Тогда 
								ТекЗначение = СтруктураОбъекта[МетаРеквизит.Имя];
								
								Если ЗначениеЗаполнено(ТекЗначение) Тогда 
									ЗначениеСсылка = Неопределено;
									
									ТекМенеджер = Менеджеры.Получить(ПервыйТип);
									
									Если Справочники.ТипВсеСсылки().СодержитТип(ПервыйТип) Тогда
										ЗначениеСсылка = ТекМенеджер.Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(ТекЗначение));
									ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ПервыйТип) Тогда 
										ЗначениеСсылка = ТекМенеджер.Менеджер[ТекЗначение];
									КонецЕсли;
									
									НовОбъект[МетаРеквизит.Имя] = ЗначениеСсылка;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
						НовОбъект.ОбменДанными.Загрузка = Истина;
						
						НовОбъект.Записать();
					ИначеЕсли СтруктураОбъекта.ИмяТипаМетаданных = "Документы" Тогда 
						НовСсылка = Документы[СтруктураОбъекта.ИмяМетаданных].ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураОбъекта.Уин));
						
						НовОбъект = НовСсылка.ПолучитьОбъект();
						
						СтруктураДанных = Новый Структура;
						
						Если СтруктураОбъекта.Свойство("Date") Тогда 
							Дата = Дата(Лев(СтруктураОбъекта.Date, 4), Сред(СтруктураОбъекта.Date, 6, 2), Сред(СтруктураОбъекта.Date, 9, 2),
							Сред(СтруктураОбъекта.Date, 12, 2), Сред(СтруктураОбъекта.Date, 15, 2), Сред(СтруктураОбъекта.Date, 18, 2));
							
							Если НовОбъект = Неопределено Или НовОбъект.Дата <> Дата Тогда 
								СтруктураДанных.Вставить("Дата", Дата);
							КонецЕсли;
						КонецЕсли;
						
						Для Каждого МетаРеквизит Из Метаданные.Документы[СтруктураОбъекта.ИмяМетаданных].Реквизиты Цикл
							ПервыйТип = МетаРеквизит.Тип.Типы()[0];
							
							Если СтруктураОбъекта.ИмяМетаданных = "ВводОстатков" И МетаРеквизит.Имя = "Комментарий" Тогда // новый реквизит
								Попытка
									СчитанноеЗначение = СтруктураОбъекта[МетаРеквизит.Имя];
								Исключение
									Продолжить;
								КонецПопытки;
							КонецЕсли;
							
							СчитанноеЗначение = СтруктураОбъекта[МетаРеквизит.Имя];
							
							Если ЗначениеЗаполнено(СчитанноеЗначение) Тогда 
								Если ОбщегоНазначения.ЭтоСсылка(ПервыйТип) Тогда 
									ТекЗначение = Неопределено;
									
									ТекМенеджер = Менеджеры.Получить(ПервыйТип);
									
									Если Справочники.ТипВсеСсылки().СодержитТип(ПервыйТип) Тогда
										ТекЗначение = ТекМенеджер.Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(СчитанноеЗначение));
									ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ПервыйТип) Тогда
										ТекЗначение = ТекМенеджер.Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(СчитанноеЗначение));
									ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ПервыйТип) Тогда 
										ТекЗначение = ТекМенеджер.Менеджер[СчитанноеЗначение];
									КонецЕсли;
								Иначе
									ТекЗначение = СтруктураОбъекта[МетаРеквизит.Имя];
									
									Попытка
										ТекЗначение = Число(СтруктураОбъекта[МетаРеквизит.Имя]);
									Исключение
										Попытка
											ТекЗначение = Булево(СтруктураОбъекта[МетаРеквизит.Имя]);
										Исключение
										КонецПопытки;
									КонецПопытки;
								КонецЕсли;
								
								Если НовОбъект = Неопределено Или НовОбъект[МетаРеквизит.Имя] <> ТекЗначение Тогда 
									СтруктураДанных.Вставить(МетаРеквизит.Имя, ТекЗначение);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
						Если НовОбъект = Неопределено Тогда  
							НовОбъект = Документы[СтруктураОбъекта.ИмяМетаданных].СоздатьДокумент();
							
							НовСсылка = Документы[СтруктураОбъекта.ИмяМетаданных].ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураОбъекта.Уин));
							НовОбъект.УстановитьСсылкуНового(НовСсылка);
							
							ЗаполнитьЗначенияСвойств(НовОбъект, СтруктураДанных);
						ИначеЕсли СтруктураДанных.Количество() > 0 Тогда 
							ЗаполнитьЗначенияСвойств(НовОбъект, СтруктураДанных);
						Иначе
							Продолжить;
						КонецЕсли;
						
						НовОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	ЧтениеXML.Закрыть();
	
	ОбщегоНазначения.СообщитьПользователю(НСтр("ru = '{СтандартныеПодсистемы.ДлительныеОперации}100'"));
КонецФункции

Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт 
	
	ТекстОтносительнойДатыРезервнойКопии = "";
	
	Параметры.Вставить("НеобходимаВыгрузкаРезервнойКопииНаПочту", ПроверитьНеобходимостьВыгрузкиРезервнойКопииНаПочту(ТекстОтносительнойДатыРезервнойКопии));
	Параметры.Вставить("ТекстОтносительнойДатыРезервнойКопии", ТекстОтносительнойДатыРезервнойКопии);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИнициализацияМенеджеров()
	
	Менеджеры = Новый Соответствие;
	
	МенеджерыДляПлановОбмена = Новый Соответствие;
	
	// ССЫЛКИ
	
	Для каждого ОбъектМД Из Метаданные.Справочники Цикл
		
		ДополнитьМассивМенеджеровСсылочнымТипом(Менеджеры, МенеджерыДляПлановОбмена, ОбъектМД, "Справочник", Справочники[ОбъектМД.Имя], "СправочникСсылка", Истина);
		
	КонецЦикла;
	
	Для каждого ОбъектМД Из Метаданные.Документы Цикл
		
		ДополнитьМассивМенеджеровСсылочнымТипом(Менеджеры, МенеджерыДляПлановОбмена, ОбъектМД, "Документ", Документы[ОбъектМД.Имя], "ДокументСсылка", Истина);
		
	КонецЦикла;
	
	ИмяТипа = "Перечисление";
	
	Для каждого ОбъектМД Из Метаданные.Перечисления Цикл
		
		Имя              = ОбъектМД.Имя;
		Менеджер         = Перечисления[Имя];
		ТипСсылкиСтрокой = "ПеречислениеСсылка." + Имя;
		ТипСсылки        = Тип(ТипСсылкиСтрокой);
		Структура = Новый Структура("Имя,ИмяТипа,ТипСсылкиСтрокой,Менеджер,ОбъектМД,ПКО,ПустаяСсылка,ВозможенПоискПоПредопределенным", Имя, ИмяТипа, ТипСсылкиСтрокой, Менеджер, ОбъектМД, , Перечисления[Имя].ПустаяСсылка(), Ложь);
		Менеджеры.Вставить(ТипСсылки, Структура);
		
	КонецЦикла;
	
	Возврат Менеджеры;
	
КонецФункции

Процедура ДополнитьМассивМенеджеровСсылочнымТипом(Менеджеры, МенеджерыДляПлановОбмена, ОбъектМД, ИмяТипа, Менеджер,
	ПрефиксИмениТипа, ВозможенПоискПоПредопределенным = Ложь)
	
	Имя              = ОбъектМД.Имя;
	ТипСсылкиСтрокой = ПрефиксИмениТипа + "." + Имя;
	СтрокаПоиска     = "ВЫБРАТЬ Ссылка ИЗ " + ИмяТипа + "." + Имя + " ГДЕ ";
	ТипСсылки        = Тип(ТипСсылкиСтрокой);
	Структура = Новый Структура("Имя,ИмяТипа,ТипСсылкиСтрокой,Менеджер,ОбъектМД,СтрокаПоиска,ВозможенПоискПоПредопределенным,ПКО",
	Имя, ИмяТипа, ТипСсылкиСтрокой, Менеджер, ОбъектМД, СтрокаПоиска, ВозможенПоискПоПредопределенным);
	Менеджеры.Вставить(ТипСсылки, Структура);
	
	
	СтруктураДляПланаОбмена = Новый Структура("Имя,ТипСсылки,ЭтоСсылочныйТип,ЭтоРегистр", Имя, ТипСсылки, Истина, Ложь);
	МенеджерыДляПлановОбмена.Вставить(ОбъектМД, СтруктураДляПланаОбмена);
	
КонецПроцедуры

#КонецОбласти