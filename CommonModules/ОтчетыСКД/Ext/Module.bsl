#Область ФормированиеСКД

Процедура ПолучитьДанныеОтчета(СхемаКомпоновкиДанных, Результат, ПорядокИтогов, УникальныйИдентификатор,
	СтруктураПараметров, АдресДанныхРасшифровки, ВыводитьВертикальныеОбщиеИтоги = Истина, АдресНастроекСКД = Неопределено) Экспорт 	
	
	//создадим компоновщик настроек и загрузим настройки по умолчанию, вместо настроек по умолчанию можно Использовать восстановленные настройки
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	
	ВариантНастроек = Неопределено;
	Если СтруктураПараметров <> Неопределено Тогда 
		СтруктураПараметров.Свойство("ВариантНастроек", ВариантНастроек); 
	КонецЕсли;
	
	Если АдресНастроекСКД = Неопределено Тогда 
		КомпоновщикНастроек.ЗагрузитьНастройки(?(ВариантНастроек = Неопределено, СхемаКомпоновкиДанных.НастройкиПоУмолчанию,
		СхемаКомпоновкиДанных.ВариантыНастроек[ВариантНастроек].Настройки));
		
		Настройки = КомпоновщикНастроек.Настройки;
		
		Для Каждого Настройка Из СтруктураПараметров Цикл 
			Если СтрНайти(Настройка.Ключ, "Отбор") <> 0 Тогда 
				ТипНастройки = ТипЗнч(Настройка.Значение);
				
				Если ТипНастройки = Тип("СписокЗначений") Тогда 
					Если Настройка.Значение.Количество() > 0 Тогда 
						ИмяПоля = СтрЗаменить(Настройка.Ключ, "Отбор", "");
						ИмяПоля = СтрЗаменить(ИмяПоля, "Доп", "");
						
						ОтчетыСКД.УстановитьОтбор(Настройки, ИмяПоля, ВидСравненияКомпоновкиДанных.ВСписке,
						Настройка.Значение, Истина);
					КонецЕсли;
				КонецЕсли;
			//ИначеЕсли Настройка.Ключ = "Периодичность" Тогда 
			//	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос;
			//	
			//	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДЕНЬ", Настройка.Значение);
			//	
			//	Если Настройка.Значение <> Перечисления.Периодичность.Регистратор Тогда 
			//		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КошелькиОстаткиИОбороты.Регистратор", "NULL");
			//		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "МЕСЯЦ", Настройка.Значение);
			//		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Регистратор", "ДЕНЬ");
			//	КонецЕсли;
			//	
			//	СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос = ТекстЗапроса;
			//	
			//	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки.ПараметрыДанных.Элементы, Настройка.Ключ, Настройка.Значение);
			Иначе
				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки.ПараметрыДанных.Элементы, Настройка.Ключ, Настройка.Значение);
			КонецЕсли;
		КонецЦикла;
		
		Если СтруктураПараметров.Свойство("Поля") Тогда 
			КоличествоЭлементов = Настройки.Выбор.Элементы.Количество();
			
			Для Индекс = 1 По КоличествоЭлементов Цикл 
				ЭлементПоля = Настройки.Выбор.Элементы.Получить(КоличествоЭлементов - Индекс);
				
				Если Не СтруктураПараметров.Поля.Свойство(Строка(ЭлементПоля.Поле)) Тогда 
					Настройки.Выбор.Элементы.Удалить(ЭлементПоля);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
		
		Если ТипЗнч(Результат) <> Тип("ТабличныйДокумент") Тогда 
			ОтчетыСКД.УстановитьПараметрВывода(Настройки, "ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет, Истина);
			
			Если ПорядокИтогов <> Неопределено Тогда 
				Для Каждого ТекИтог Из ПорядокИтогов Цикл
					Если ТекИтог.Использование Тогда 
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				ИтогВалюта = Настройки.Структура.Получить(0);
				ТекПолеГруппировки = ИтогВалюта.ПоляГруппировки.Элементы.Получить(0);
				ТекПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ТекИтог.Поле);
			КонецЕсли;
		Иначе
			Если Не ВыводитьВертикальныеОбщиеИтоги Тогда 
				ОтчетыСКД.УстановитьПараметрВывода(Настройки, "ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет, Истина);
			КонецЕсли;
			
			Если ПорядокИтогов <> Неопределено Тогда 
				ИтогВалюта = Настройки.Структура.Получить(0);
				
				ИтогВалюта.Структура.Очистить();
				
				ТекИтог = ИтогВалюта;
				
				ТекИтогОригинал = Истина;
				
				Для Каждого Стр из ПорядокИтогов Цикл			
					Если Стр.Использование = Истина Тогда
						Если Не ТекИтогОригинал Тогда 
							НовГруппировка = ТекИтог.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
							ЗаполнитьЗначенияСвойств(НовГруппировка, ИтогВалюта);
							
							ОтчетыСКД.СкопироватьГруппировку(НовГруппировка, ИтогВалюта);
							
							ТекПолеГруппировки = НовГруппировка.ПоляГруппировки.Элементы.Получить(0);
							ТекПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(Стр.Поле);
							
							ТекИтог = НовГруппировка;
						Иначе
							ТекПолеГруппировки = ТекИтог.ПоляГруппировки.Элементы.Получить(0);
							ТекПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(Стр.Поле);
							
							ТекИтогОригинал = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		#Если МобильноеПриложениеСервер Тогда
			Для Каждого Элемент Из Настройки.УсловноеОформление.Элементы Цикл 
				Для Каждого Поле Из Элемент.Поля.Элементы Цикл 
					ПолеКомпоновкиДанныхСтрокой = Строка(Поле.Поле);
					
					Если ПолеКомпоновкиДанныхСтрокой = "Период" Или ПолеКомпоновкиДанныхСтрокой = "Регистратор" Тогда 
						Для Каждого ЭлементОформления Из Элемент.Оформление.Элементы Цикл 
							Если ЭлементОформления.Параметр = Новый ПараметрКомпоновкиДанных("МаксимальнаяШирина") И ЭлементОформления.Использование Тогда 
								ЭлементОформления.Значение = ЭлементОформления.Значение / 2;
							КонецЕсли;
						КонецЦикла;
					Иначе
						Для Каждого ЭлементОформления Из Элемент.Оформление.Элементы Цикл 
							Если ЭлементОформления.Параметр = Новый ПараметрКомпоновкиДанных("МаксимальнаяШирина") И ЭлементОформления.Использование Тогда 
								ЭлементОформления.Значение = ЭлементОформления.Значение / 2;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		#КонецЕсли
	Иначе
		Если АдресНастроекСКД <> "" Тогда 
			Настройки = ПолучитьИзВременногоХранилища(АдресНастроекСКД);
			
			КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(?(ВариантНастроек = Неопределено, СхемаКомпоновкиДанных.НастройкиПоУмолчанию,
			СхемаКомпоновкиДанных.ВариантыНастроек[ВариантНастроек].Настройки));			
		КонецЕсли;
		
		Настройки = КомпоновщикНастроек.Настройки;
		
		Если ПорядокИтогов <> Неопределено Тогда 
			Для Каждого ТекИтог Из ПорядокИтогов Цикл
				Если ТекИтог.Использование Тогда 
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ИтогВалюта = Настройки.Структура.Получить(0);
			ТекПолеГруппировки = ИтогВалюта.ПоляГруппировки.Элементы.Получить(0);
			ТекПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ТекИтог.Поле);
		КонецЕсли;
		
		Если СтруктураПараметров <> Неопределено Тогда 
			Для Каждого Настройка Из СтруктураПараметров Цикл 
				Если СтрНайти(Настройка.Ключ, "ОтборДоп") <> 0 Тогда 
					ТипНастройки = ТипЗнч(Настройка.Значение);
					
					Если ТипНастройки = Тип("СписокЗначений") Тогда 
						Если Настройка.Значение.Количество() > 0 Тогда 
							ИмяПоля = СтрЗаменить(Настройка.Ключ, "Отбор", "");
							ИмяПоля = СтрЗаменить(ИмяПоля, "Доп", "");
							
							ОтчетыСКД.УстановитьОтбор(Настройки, ИмяПоля, ВидСравненияКомпоновкиДанных.ВСписке,
							Настройка.Значение, Истина);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если СтруктураПараметров.Свойство("ОбязательныеПоля") И СтруктураПараметров.ОбязательныеПоля.Количество() > 0 Тогда 
				Для Каждого СтрПоле Из СтруктураПараметров.ОбязательныеПоля Цикл 
					ТекПолеКомпоновки = Новый ПолеКомпоновкиДанных(СтрПоле);
					
					ЕстьПоле = Ложь;
					
					Для Каждого СтрЭлем Из Настройки.Выбор.Элементы Цикл 
						Если СтрЭлем.Поле = ТекПолеКомпоновки Тогда 
							Если Не СтрЭлем.Использование Тогда 
								СтрЭлем.Использование = Истина;
							КонецЕсли;
							
							ЕстьПоле = Истина;
								
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если Не ЕстьПоле Тогда 
						НовЭлем = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
						НовЭлем.Поле = ТекПолеКомпоновки; 
						НовЭлем.Использование = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			//Если КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(Настройки, "Периодичность").Значение = Перечисления.Периодичность.Регистратор Тогда
				ГруппировкаРегистратор = ПолучитьГруппировку(Настройки, "Регистратор");
				Если ГруппировкаРегистратор <> Неопределено Тогда 
					НовСтр = ГруппировкаРегистратор.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
					НовСтр.Поле = Новый ПолеКомпоновкиДанных("Период");
					НовСтр.Использование = Истина;
				КонецЕсли;
			//КонецЕсли;
		КонецЕсли;
		
		Если Не ВыводитьВертикальныеОбщиеИтоги Тогда 
			ОтчетыСКД.УстановитьПараметрВывода(Настройки, "ВертикальноеРасположениеОбщихИтогов", Ложь, Истина);
		КонецЕсли;
	КонецЕсли;
	
	//Помещаем в переменную данные о расшифровке данных - здесь ненужный пункт, но пусть будет.
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	//Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки, ,
	?(ТипЗнч(Результат) = Тип("ТабличныйДокумент"), Тип("ГенераторМакетаКомпоновкиДанных"), Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")));
	
	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	
	//Очищаем поле табличного документа
	
	Если ТипЗнч(Результат) = Тип("ТабличныйДокумент") Тогда 
		//Выводим результат в табличный документ
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
	Иначе
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(Результат);
	КонецЕсли;
	
	Попытка
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
	АдресДанныхРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификатор);	
	
КонецПроцедуры

Функция ДанныеРасшифровкиОтчета(Расшифровка, АдресДанныхРасшифровки) Экспорт
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки);	
	ЭлементРасшифровки = ДанныеРасшифровки.Элементы[Расшифровка];
	ОсновноеДействие = ЭлементРасшифровки.ОсновноеДействие;
	
	ПоляРасшифровки = Новый Структура;
	Для Каждого ЗначениеПоля Из ЭлементРасшифровки.ПолучитьПоля() Цикл
		ПоляРасшифровки.Вставить(ЗначениеПоля.Поле, ЗначениеПоля.Значение);
	КонецЦикла;
	
	ПоляРасшифровкиРодителей = Новый Структура;
	Для Каждого Родитель Из ЭлементРасшифровки.ПолучитьРодителей() Цикл
		ЗаполнитьПоляРодительскихЭлементовРасшифровки(Родитель, ПоляРасшифровкиРодителей);
	КонецЦикла;
	
	ПараметрыДанных = Новый Структура;
	Для Каждого Параметр Из ДанныеРасшифровки.Настройки.ПараметрыДанных.Элементы Цикл
		Если Не Параметр.Использование Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыДанных.Вставить(Параметр.Параметр, Параметр.Значение);
	КонецЦикла; 
	
	Отбор = Новый Структура;
	Для Каждого ЭлементОтбора Из ДанныеРасшифровки.Настройки.Отбор.Элементы Цикл
		Если Не ЭлементОтбора.Использование Или ЭлементОтбора.ВидСравнения <> ВидСравненияКомпоновкиДанных.Равно Тогда
			Продолжить;
		КонецЕсли;
		Поле = Строка(ЭлементОтбора.ЛевоеЗначение);
		Отбор.Вставить(Поле, ЭлементОтбора.ПравоеЗначение);
	КонецЦикла;
	
	ДанныеРасшифровкиОтчета = Новый Структура;
	ДанныеРасшифровкиОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
	ДанныеРасшифровкиОтчета.Вставить("ПоляРасшифровкиРодители", ПоляРасшифровкиРодителей);
	ДанныеРасшифровкиОтчета.Вставить("ПараметрыДанных", ПараметрыДанных);
	ДанныеРасшифровкиОтчета.Вставить("Отбор", Отбор);
	ДанныеРасшифровкиОтчета.Вставить("ОсновноеДействие", ОсновноеДействие);
	
	Возврат ДанныеРасшифровкиОтчета;
	
КонецФункции

Процедура ЗаполнитьПоляРодительскихЭлементовРасшифровки(ЭлементРасшифровки, ПоляРасшифровкиРодителей)
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для Каждого ЗначениеПоля Из ЭлементРасшифровки.ПолучитьПоля() Цикл
			ПоляРасшифровкиРодителей.Вставить(ЗначениеПоля.Поле, ЗначениеПоля.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Родитель Из ЭлементРасшифровки.ПолучитьРодителей() Цикл
		ЗаполнитьПоляРодительскихЭлементовРасшифровки(Родитель, ПоляРасшифровкиРодителей);
	КонецЦикла;
	
КонецПроцедуры

Процедура СкопироватьГруппировку(ГруппировкаПриемник, ГруппировкаИсточник) Экспорт 
	Для Каждого СтрВыбор из ГруппировкаИсточник.Выбор.Элементы Цикл
		НовВыбор = ГруппировкаПриемник.Выбор.Элементы.Добавить(ТипЗнч(СтрВыбор));
		ЗаполнитьЗначенияСвойств(НовВыбор, СтрВыбор);
	КонецЦикла;
	
	Для Каждого СтрПолеГруппировки из ГруппировкаИсточник.ПоляГруппировки.Элементы Цикл
		новПолеГруппировки = ГруппировкаПриемник.ПоляГруппировки.Элементы.Добавить(ТипЗнч(стрПолеГруппировки));
		ЗаполнитьЗначенияСвойств(новПолеГруппировки, СтрПолеГруппировки);
	КонецЦикла;
	
	Для Каждого СтрПолеПорядок из ГруппировкаИсточник.Порядок.Элементы Цикл
		новПолеПорядок = ГруппировкаПриемник.Порядок.Элементы.Добавить(ТипЗнч(стрПолеПорядок));
		ЗаполнитьЗначенияСвойств(новПолеПорядок, СтрПолеПорядок);
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьОтбор(Настройки, ИмяПоля, ВидСравнения, Значение, Использование) Экспорт 	
	
	НовЭлемент = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
	НовЭлемент.Использование = Использование;
	НовЭлемент.ПравоеЗначение = Значение;
	НовЭлемент.ВидСравнения = ВидСравнения;
	
КонецПроцедуры

Процедура УстановитьПараметрВывода(Настройки, ИмяПараметра, Значение, Использование) Экспорт 
	Для Каждого Стр из настройки.параметрыВывода.элементы Цикл
		Если Стр.параметр = новый ПараметрКомпоновкиДанных(ИмяПараметра) Тогда 
			стр.использование = Использование;
			стр.значение = Значение;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПолучитьПараметрыНастроекСКД(СхемаКомпоновкиДанных, АдресНастроекСКД, СтруктураКомпоновки = Неопределено, ВыбранныеПоля = Неопределено, ПараметрыКомпоновки = Неопределено) Экспорт 
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	Если АдресНастроекСКД <> "" Тогда 
		Настройки = ПолучитьИзВременногоХранилища(АдресНастроекСКД);
		
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);			
	КонецЕсли;
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	Если СтруктураКомпоновки <> Неопределено И СтруктураКомпоновки.Количество() = 0 Тогда 			
		Для Каждого ЭлементСтруктуры Из Настройки.Структура Цикл
			ИнициализироватьНастройкиГруппировки(ЭлементСтруктуры, СтруктураКомпоновки);
		КонецЦикла;
	КонецЕсли;
	
	Если ВыбранныеПоля <> Неопределено Тогда 
		Для Каждого Элемент Из Настройки.Выбор.Элементы Цикл
			ЗаполнитьЗначенияСвойств(ВыбранныеПоля.Добавить(), Элемент);
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыКомпоновки <> Неопределено Тогда 
		Для Каждого Парам Из ПараметрыКомпоновки Цикл 
			ПараметрПоиск = Настройки.ПараметрыДанных.Элементы.Найти(Парам.Ключ);
			
			Если ПараметрПоиск <> Неопределено И ПараметрПоиск.Использование Тогда 
				ПараметрыКомпоновки.Вставить(Парам.Ключ, ПараметрПоиск.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьНастройкиГруппировки(ЭлементСтруктуры, СтруктураКомпоновки) Экспорт 
	
	НовСтрукт = СтруктураКомпоновки.Добавить();
	
	Для Каждого ЭлементПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл 
		НовСтрукт.Поле = ЭлементПолеГруппировки.Поле;
		НовСтрукт.Использование = ЭлементСтруктуры.Использование;
		НовСтрукт.Имя = ЭлементСтруктуры.Имя;
	КонецЦикла;
	
	Если ЭлементСтруктуры.Структура.Количество() > 0 Тогда 
		Для Каждого ЭлементСтруктурыВнутр Из ЭлементСтруктуры.Структура Цикл		
			ИнициализироватьНастройкиГруппировки(ЭлементСтруктурыВнутр, СтруктураКомпоновки);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерактивнаяРабота

Процедура ОбработкаРасшифровкиСервер(Расшифровка, Парам, АдресДанныхРасшифровки, СхемаКомпоновкиДанных) Экспорт	
	ДанныеРасшифровкиОтчета = ОтчетыСКД.ДанныеРасшифровкиОтчета(Расшифровка, АдресДанныхРасшифровки);
	
	//создадим компоновщик настроек и загрузим настройки по умолчанию, вместо настроек по умолчанию можно использовать восстановленные настройки
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Настройки = КомпоновщикНастроек.Настройки;
	
	//установка параметров отчета, без КомпоновщикНастроекКомпоновкиДанных делать это гораздо сложнее
	Если ДанныеРасшифровкиОтчета.ПоляРасшифровкиРодители.Свойство("Партия") Тогда
		Для Каждого Стр из Настройки.Отбор.Элементы Цикл
			Если Стр.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Партия") Тогда 
				Стр.Использование = Истина;
				Стр.ПравоеЗначение = ДанныеРасшифровкиОтчета.ПоляРасшифровкиРодители.Партия;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеРасшифровкиОтчета.ПоляРасшифровкиРодители.Свойство("Кошелек") Тогда
		Для Каждого Стр из Настройки.Отбор.Элементы Цикл
			Если Стр.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Кошелек") Тогда 
				Стр.Использование = Истина;
				Стр.ПравоеЗначение = ДанныеРасшифровкиОтчета.ПоляРасшифровкиРодители.Кошелек;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//Помещаем в переменную данные о расшифровке данных - здесь ненужный пункт, но пусть будет.
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	//Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки, , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	
	//Очищаем поле табличного документа
	
	ТЗ = Новый ТаблицаЗначений;
	
	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТЗ);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Парам.Вставить("ОтборПоСсылке", ТЗ.ВыгрузитьКолонку("Регистратор"));
КонецПроцедуры

Процедура НазадУровеньДиаграммы(Форма) Экспорт 
	
	ОтборТекУровень = Форма.МасОтборТекУровень.Получить(Форма.МасОтборТекУровень.Количество() - 1);
	
	Если ТипЗнч(ОтборТекУровень.Значение) = Тип("СправочникСсылка.Валюты") Тогда 
		Форма.ОтборДопВалюта.Удалить(Форма.ОтборДопВалюта.НайтиПоЗначению(ОтборТекУровень.Значение));
	ИначеЕсли ТипЗнч(ОтборТекУровень.Значение) = Тип("СправочникСсылка.Кошельки") Тогда 
		Форма.ОтборДопКошелек.Удалить(Форма.ОтборДопКошелек.НайтиПоЗначению(ОтборТекУровень.Значение));
	ИначеЕсли ТипЗнч(ОтборТекУровень.Значение) = Тип("СправочникСсылка.Метки") Тогда 
		Форма.ОтборДопМетка.Удалить(Форма.ОтборДопМетка.НайтиПоЗначению(ОтборТекУровень.Значение));
	ИначеЕсли ТипЗнч(ОтборТекУровень.Значение) = Тип("СправочникСсылка.Статьи") Тогда 
		Форма.ОтборДопСтатья.Удалить(Форма.ОтборДопСтатья.НайтиПоЗначению(ОтборТекУровень.Значение));
	ИначеЕсли ТипЗнч(ОтборТекУровень.Значение) = Тип("ПеречислениеСсылка.ТипыОпераций") Тогда 
		Форма.ОтборДопТипОперации.Удалить(Форма.ОтборДопТипОперации.НайтиПоЗначению(ОтборТекУровень.Значение));
	КонецЕсли;
	
	Форма.МасОтборТекУровень.Удалить(ОтборТекУровень);
	
	Форма.ТекУровеньГруппировки = Форма.ТекУровеньГруппировки - 1;
	
	Форма.ОбновитьДиаграммуСервер();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедуры

Функция ПолучитьДанныеПериодаПоПериодичности(Период, Периодичность) Экспорт 
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) КАК НачалоПериода,
	|	КОНЕЦПЕРИОДА(&Период, ДЕНЬ) КАК КонецПериода");
	Запрос.УстановитьПараметр("Период", Период);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДЕНЬ", Периодичность);
	
	Рез = Запрос.Выполнить().Выбрать();
	Рез.Следующий();
	
	ПериодПарам = Новый Структура;
	
	ПериодПарам.Вставить("НачалоПериода", Рез.НачалоПериода);
	ПериодПарам.Вставить("КонецПериода", Рез.КонецПериода);
	
	Возврат ПериодПарам;
	
КонецФункции

#Область ФормаНастройкаСКД

Процедура ПриСозданииНаСервере(Форма) Экспорт
	
	МассивРеквизитов = Новый Массив;
	
	МассивРеквизитов.Добавить(Новый РеквизитФормы("АдресНастроекСКД", Новый ОписаниеТипов("Строка")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("АдресСКД", Новый ОписаниеТипов("Строка")));
	
	Форма.ИзменитьРеквизиты(МассивРеквизитов);
	
	ИмяМакетаСКД = "СКД" + СтрЗаменить(Форма.ИмяФормы, "Обработка.Отчеты.Форма.", "");
	
	СКД = Обработки.Отчеты.ПолучитьМакет(ИмяМакетаСКД);
	
	Если СКД <> Неопределено Тогда
		Форма.АдресСКД = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Не удалось получить СКД отчета: %1'"), ИмяМакетаСКД));
	КонецЕсли;
	
	Настройки = Неопределено;
	
	Если Настройки <> Неопределено Тогда
		Форма.АдресНастроекСКД = ПоместитьВоВременноеХранилище(Настройки, Новый УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьАдресаСхемыКомпоновкиДанныхВоВременномХранилище(Форма) Экспорт
	
	Адреса = Новый Структура("СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных");
	
	// Схема
	Если ПустаяСтрока(Форма.АдресСКД) Тогда
		//СхемаИНастройки = СегментыСервер.ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(СегментСсылка, ИмяШаблонаСКД);
		//СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
		//Адреса.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных,УникальныйИдентификатор)
	Иначе
		Адреса.СхемаКомпоновкиДанных = Форма.АдресСКД;
	КонецЕсли;

	// Настройки
	Если НЕ ПустаяСтрока(Форма.АдресНастроекСКД) Тогда
		Адреса.НастройкиКомпоновкиДанных = Форма.АдресНастроекСКД;
	КонецЕсли;
	
	Возврат Адреса;
	
КонецФункции

Функция ПрименитьИзмененияКСхемеКомпоновкиДанных(АдресСКД, АдресНастроекСКД, УникальныйИдентификатор) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("АдресНастроекСКД","");
	
	СКД = ПолучитьИзВременногоХранилища(АдресСКД);
	
	// Полученные настройки могут быть равны настройкам по умолчанию схемы.
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
	КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить();
	Если ОбщегоНазначенияКлиентСервер.ПолучитьXML(КомпоновщикНастроек.ПолучитьНастройки()) <>
		ОбщегоНазначенияКлиентСервер.ПолучитьXML(ПолучитьИзВременногоХранилища(АдресНастроекСКД)) Тогда
		ВозвращаемоеЗначение.АдресНастроекСКД = АдресНастроекСКД;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция СписокДоступныхПараметровУсловногоОформления() Экспорт 
	
	Спис = Новый СписокЗначений;
	Спис.Добавить("МаксимальнаяШирина", "Макс. ширина");
	
	Возврат Спис;
	
КонецФункции

Функция ПолучитьПредставлениеПараметраУсловногоОформления(Параметр) Экспорт 
	
	Спис = СписокДоступныхПараметровУсловногоОформления();
	
	ЭлементСписка = Спис.НайтиПоЗначению(Параметр);
	
	Возврат ЭлементСписка.Представление;
	
КонецФункции

#КонецОбласти

Функция ПолучитьГруппировку(Настройки, Поле)
	
	Для Каждого ЭлемГруппировки Из Настройки.Структура Цикл 
		Возврат ПолучитьГруппировкуРекурсивно(ЭлемГруппировки, Новый ПолеКомпоновкиДанных(Поле));
	КонецЦикла;
	
КонецФункции

Функция ПолучитьГруппировкуРекурсивно(ЭлементСтруктуры, Поле)
	
	Для Каждого ЭлемГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл  
		Если ЭлемГруппировки.Поле = Поле Тогда 
			Возврат ЭлементСтруктуры;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементСтруктуры.Структура.Количество() > 0 Тогда 
		Для Каждого ЭлемСтруктВнутр Из ЭлементСтруктуры.Структура Цикл 
			Возврат ПолучитьГруппировкуРекурсивно(ЭлемСтруктВнутр, Поле);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции


#КонецОбласти