
#Область ПрограммныйИнтерфейс

Функция ОпределитьНеобходимостьОбновления() Экспорт
	
	СписокОбработчиковОбновления = ПолучитьСписокОбработчиковОбновленияТекущейВерсии();
	
	Возврат НЕ СписокОбработчиковОбновления.Количество() = 0;
	
КонецФункции

Процедура ОбновитьБазуДанных(Отказ, Лог) Экспорт
	
	НоваяВерсияПриложения = Метаданные.Версия;
	
	СписокОбработчиков = ПолучитьСписокОбработчиковОбновленияТекущейВерсии();
	
	Попытка
		
		Для Каждого Обработчик Из СписокОбработчиков Цикл
			
			Если Обработчик = "1.1.17" Тогда				
				ВыполнитьОбновление1_1_17(Лог);
			ИначеЕсли Обработчик = "1.1.18" Тогда				
				ВыполнитьОбновление1_1_18(Лог);
			ИначеЕсли Обработчик = "1.1.25" Тогда				
				ВыполнитьОбновление1_1_25(Лог);
			КонецЕсли;
			
		КонецЦикла;
		
		Константы.ТекущаяВерсияПриложения.Установить(НоваяВерсияПриложения);
		ОбновитьПовторноИспользуемыеЗначения();
		
	Исключение
		
		Отказ = Истина;
		Лог = ОписаниеОшибки();
		
	КонецПопытки;
	
	ПараметрыСеанса.ОбновлениеБД = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбновления

Процедура ВыполнитьОбновление1_1_17(Лог)
	запрос = новый запрос("ВЫБРАТЬ
	|	Долги.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.Долги КАК Долги
	|ГДЕ
	|	Долги.Валюта = ЗНАЧЕНИЕ(справочник.валюты.)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор");
	рез = запрос.Выполнить();
	
	Если рез.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	Валюта = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ВалютаУчета");
	
	Если не ЗначениеЗаполнено(Валюта) Тогда 
		ВызватьИсключение НСтр("ru = 'Не указана Валюта учета'")
	КонецЕсли;
	
	выборка = рез.Выбрать();
	
	Пока выборка.Следующий() Цикл
		набор = РегистрыНакопления.Долги.СоздатьНаборЗаписей();
		набор.отбор.регистратор.установить(выборка.регистратор);
		набор.Прочитать();
		
		Для Каждого стр из набор Цикл
			стр.Валюта = Валюта;
		КонецЦикла;
		
		набор.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура ВыполнитьОбновление1_1_18(Лог)
	запрос = новый запрос("ВЫБРАТЬ
	|	Операция.Ссылка,
	|	Операция.Кошелек.Валюта
	|ИЗ
	|	Документ.Операция КАК Операция
	|ГДЕ
	|	Операция.Валюта = ЗНАЧЕНИЕ(справочник.валюты.)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Операция.Дата");	
	рез = запрос.Выполнить().Выбрать();
	
	Валюта = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ВалютаУчета");
	
	Пока рез.Следующий() Цикл
		о = рез.ссылка.ПолучитьОбъект();
		о.Валюта = рез.КошелекВалюта;
		
		Если не ЗначениеЗаполнено(о.Валюта) Тогда 
			о.Валюта = Валюта;
		КонецЕсли;
		
		о.записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
КонецПроцедуры

Процедура ВыполнитьОбновление1_1_25(Лог)
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Операция.Ссылка КАК СсылкаРасход,
	|	Операция1.Ссылка КАК СсылкаДолг,
	|	Операция1.ФизЛицо
	|ИЗ
	|	Документ.Операция КАК Операция
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Операция КАК Операция1
	|		ПО Операция.Дата = Операция1.Дата
	|			И Операция.Сумма = Операция1.Сумма
	|			И Операция.Комментарий = Операция1.Комментарий
	|			И Операция.Метка = Операция1.Метка
	|ГДЕ
	|	Операция.ТипОперации = ЗНАЧЕНИЕ(перечисление.типыопераций.расход)
	|	И Операция1.ТипОперации = ЗНАЧЕНИЕ(перечисление.типыопераций.долги)
	|	И Операция.Метка <> ЗНАЧЕНИЕ(справочник.метки.)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Операция.Дата");	
	МасРез = Запрос.ВыполнитьПакет();
	
	Если МасРез[0].Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	Выборка = МасРез[0].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.СсылкаРасход.ПолучитьОбъект();
		Объект.СуммаДолг = Объект.Сумма;
		Объект.Сумма = Объект.Сумма * 2;
		Объект.СуммаОбщиеЗатраты = Объект.Сумма;
		Объект.ОбщиеЗатраты = Истина;
		Объект.ФизЛицо = Выборка.Физлицо;
		
		Объект.Записать(РежимЗаписиДокумента.Проведение);
		
		Объект = Выборка.СсылкаДолг.ПолучитьОбъект();
		Объект.Удалить();
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Сравнить две строки версий.
//
// Параметры:
//  СтрокаВерсии1  - Строка - номер версии в формате РР.{П|ПП}.ЗЗ.
//  СтрокаВерсии2  - Строка - второй сравниваемый номер версии.
//
// Возвращаемое значение:
//   Число   - больше 0, Если СтрокаВерсии1 > СтрокаВерсии2; 0, Если версии равны.
//
Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2) Экспорт
	
	Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), "0.0.0", СтрокаВерсии1);
	Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), "0.0.0", СтрокаВерсии2);
	
	Версия1 = СтрРазделить(Строка1, ".");
	Если Версия1.Количество() <> 3 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неправильный формат параметра СтрокаВерсии1: %1'"), СтрокаВерсии1);
	КонецЕсли;
	
	Версия2 = СтрРазделить(Строка2, ".");
	Если Версия2.Количество() <> 3 Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неправильный формат параметра СтрокаВерсии2: %1'"), СтрокаВерсии2);
	КонецЕсли;
	
	Результат = 0;
	
	Для Разряд = 0 По 2 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СписокОбработчиковОбновления()
	
	СписокОбработчиков = Новый Массив;
	СписокОбработчиков.Добавить("1.1.17");
	СписокОбработчиков.Добавить("1.1.18");
	СписокОбработчиков.Добавить("1.1.25");
	
	Возврат СписокОбработчиков;
	
КонецФункции

Функция ПолучитьСписокОбработчиковОбновленияТекущейВерсии()
	
	СписокОбработчиковОбновления = Новый Массив;
	
	ТекущаяВерсия = ЗначениеНастроекВызовСервераПовтИсп.ТекущаяВерсияПриложения();
	СписокОбработчиков = СписокОбработчиковОбновления();
	
	Для Каждого Обработчик Из СписокОбработчиков Цикл
		
		Если СравнитьВерсии(ТекущаяВерсия, Обработчик) < 0 Тогда
			
			СписокОбработчиковОбновления.Добавить(Обработчик);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокОбработчиковОбновления;
	
КонецФункции

#КонецОбласти