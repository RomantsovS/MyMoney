#Область ПрограммныйИнтерфейс

Функция ОбработатьЗапускПриложения() Экспорт
	
	ПервыйЗапуск = Ложь;
	
	Если ПервыйЗапуск Тогда
		
	КонецЕсли;
	
	Возврат ПервыйЗапуск;
	
КонецФункции

// Выполняет необходимые действия перед запуском приложения.
//
Процедура ОбновитьПриложение() Экспорт
	
	НачатьТранзакцию();
	
	ПараметрыСеанса.ОткрыватьЧтоНового = Ложь;
	ПараметрыСеанса.ОбновлениеБД       = Ложь;
	
	ПараметрыСеанса.ВерсияФорматаОбмена = 0;
	
	ВерсияПриложенияДоОбновления = Константы.ТекущаяВерсияПриложения.Получить();
	НоваяВерсияПриложения = Метаданные.Версия;
	
	Если ВерсияПриложенияДоОбновления <> НоваяВерсияПриложения Тогда		
		ПараметрыСеанса.ОткрыватьЧтоНового = Истина;
		
		Если ОбновлениеБД.ОпределитьНеобходимостьОбновления() Тогда
			ПараметрыСеанса.ОбновлениеБД = Истина;
			
			// Установка ТекущаяВерсияПриложения будет после успешного обновления
		Иначе
			Константы.ТекущаяВерсияПриложения.Установить(НоваяВерсияПриложения);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура УстановитьОриентациюЭкрана() Экспорт
	
	ОбщегоНазначения.УстановитьОриентациюЭкрана();
	
КонецПроцедуры

Функция ПриНачалеРаботыСистемыПроверитьНеобходимостьЗагрузкиКурсов(ИдентификаторЗадания) Экспорт 
	ОткрыватьЗагрузку = Константы.ОткрыватьЗагрузкуКурсовПриНачалеРаботы.Получить();
	
	Если ОткрыватьЗагрузку = 0 Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПриНачалеРаботыСистемыПроверитьНеобходимостьЗагрузкиКурсов() Тогда 
		Если ОткрыватьЗагрузку = 2 Тогда 
			Возврат Истина;
		Иначе
			ПараметрыЗагрузки = Обработки.ЗагрузкаКурсовВалют.ПараметрыЗагрузкиКурсовВалют();
			
			ПараметрыЗадания = Новый Структура;
			ПараметрыЗадания.Вставить("ИмяОбработки", Метаданные.Обработки.ЗагрузкаКурсовВалют.Имя);
			ПараметрыЗадания.Вставить("ИмяМетода", "ЗагрузитьВФоне");
			ПараметрыЗадания.Вставить("ПараметрыВыполнения", ПараметрыЗагрузки);
			ПараметрыЗадания.Вставить("ЭтоВнешняяОбработка", Ложь);
			//ПараметрыЗадания.Вставить("ДополнительнаяОбработкаСсылка", ДополнительнаяОбработкаСсылка);
			//ПараметрыЗадания.Вставить("БезопасныйРежим", Ложь);
			
			ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
			ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка курсов валют'");
			ПараметрыВыполненияВФоне.ОжидатьЗавершение = Ложь;
			
			РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(
			"ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки",
			ПараметрыЗадания, ПараметрыВыполненияВФоне);
			
			ИдентификаторЗадания = РезультатФоновогоЗадания.ИдентификаторЗадания;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

Функция ПарольДляВхода() Экспорт	
	Возврат Константы.ПарольДляВхода.Получить();	
КонецФункции

Функция НеПоказыватьСообщениеУстановкиПароля() Экспорт	
	Возврат Не Константы.НеПоказыватьСообщениеУстановкиПароля.Получить();	
КонецФункции

Функция УдалитьОбъектСПроверкой(ТекСсылка, ТекстСообщения) Экспорт
	
	Мас = Новый Массив;
	Мас.Добавить(ТекСсылка);
	
	ТЗ = НайтиПоСсылкам(Мас);
	
	КоличествоСсылок = ТЗ.Количество();
	
	Если КоличествоСсылок > 0 Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'На удаляемый объект имеется %1 ссылок. Удаление невозможно!'"),
		КоличествоСсылок);
		
		Возврат Ложь;
	КонецЕсли;
	
	ТекОбъект = ТекСсылка.ПолучитьОбъект();
	ТекОбъект.Удалить();
	
	ТекстСообщения = НСтр("ru = 'Удалено'");
	
	Возврат Истина;
	
КонецФункции

Процедура УстановитьЗначениеПараметраСеанса(Имя, Значение) Экспорт 
	
	ПараметрыСеанса[Имя] = Значение;
	
КонецПроцедуры

#КонецОбласти